corHMM:::plot_batch_profile_lik(dredge_1_profile, ylim = c(-100, -41))
dredge_1_profile
corHMM:::plot_batch_profile_lik(dredge_1_profile, ylim = c(-200, -41))
corHMM:::plot_batch_profile_lik(dredge_1_profile, ylim = c(-400, -41))
corHMM:::plot_batch_profile_lik(dredge_1_profile, ylim = c(-100, -41))
corHMM:::plot_batch_profile_lik(dredge_1_profile, ylim = c(-10000, -41))
corHMM:::plot_batch_profile_lik(dredge_1_profile, ylim = c(-1000, -41))
corHMM:::plot_batch_profile_lik(dredge_1_profile, ylim = c(-100, -41))
dredge_2_profile <- corHMM:::get_batch_profile_lik(corhmm_obj = dredge_fit_2,
range_factor = 1000,
n_points = 20,
ncores = 10,
dredge = TRUE)
dredge_fit_2
debug(corHMM:::compute_neglnlikelihood)
dredge_2_profile <- corHMM:::get_batch_profile_lik(corhmm_obj = dredge_fit_2,
range_factor = 1000,
n_points = 20,
ncores = 10,
dredge = TRUE)
debug(fixed_corhmm)
debug(corHMM:::fixed_corhmm)
dredge_2_profile <- corHMM:::get_batch_profile_lik(corhmm_obj = dredge_fit_2,
range_factor = 1000,
n_points = 20,
ncores = 10,
dredge = TRUE)
debug(get_batch_profile_lik)
debug(corHMM:::get_batch_profile_lik)
dredge_2_profile <- corHMM:::get_batch_profile_lik(corhmm_obj = dredge_fit_2,
range_factor = 1000,
n_points = 20,
ncores = 10,
dredge = TRUE)
dredge_2_profile <- corHMM:::get_batch_profile_lik(corhmm_obj = dredge_fit_2,
range_factor = 1000,
n_points = 20,
ncores = 10,
dredge = TRUE)
corhmm_obj
MatrixToPars
corhmm_obj$index.mat
corhmm_obj$solution
MatrixToPars
debug(MatrixToPars)
raw.rates
index.mat
par
i
seq_along(par)
par
raw.rates
index.mat
i
which(index.mat == i)
raw.rates[which(index.mat == i)]
raw.rates[which(index.mat == i)]
multi.which(index.mat == i)[1, ]
paste0(rownames(raw.rates)[relevant_indices[1]],
" -> ", colnames(raw.rates)[relevant_indices[2]])
dredge_2_profile <- corHMM:::get_batch_profile_lik(corhmm_obj = dredge_fit_2,
range_factor = 1000,
n_points = 20,
ncores = 10,
dredge = TRUE)
index.mat
library(corHMM)
data(primates)
phy <- multi2di(primates[[1]])
data <- primates[[2]]
library(dentist)
fn_corHMM <- function(par, phy, data, rate.cat){
corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 1, p = par)
loglik <- corhmm_fit$loglik
neg_loglik <- -loglik
return(neg_loglik)
}
fn_Dredge <- function(par, phy, data, rate.cat){
corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 1, p = par)
pen <- sum(log(par))
loglik <- corhmm_fit$loglik + pen
neg_loglik <- -loglik
return(neg_loglik)
}
phy$edge.length <- phy$edge.length + 2e-5
# corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 2)
dredge_fit_3 <- corHMM:::corHMMDredge(phy = phy, data = data, 3, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps)
dredge_fit_2 <- corHMM:::corHMMDredge(phy = phy, data = data, 2, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps)
dredge_fit_1 <- corHMM:::corHMMDredge(phy = phy, data = data, 1, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps)
par(mar=c(.1,.1,.1,.1))
plotRECON(dredge_fit_2$phy, dredge_fit_1$states, pie.cex = 1)
dredge_fit_1$index.mat[dredge_fit_1$solution < 1e-10] <- NA
dredge_fit_1$index.mat[!is.na(dredge_fit_1$index.mat)] <-
1:length(dredge_fit_1$index.mat[!is.na(dredge_fit_1$index.mat)])
dredge_fit_1
dredge_fit_1$index.mat
dredge_fit_1$index.mat[dredge_fit_1$solution < 1e-10] <- NA
dredge_fit_1$index.mat[!is.na(dredge_fit_1$index.mat)] <-
1:length(dredge_fit_1$index.mat[!is.na(dredge_fit_1$index.mat)])
dredge_fit_1$solution[dredge_fit_1$solution < 1e-10] <- NA
dredge_fit_1
dredge_fit_2$index.mat[dredge_fit_2$solution < 1e-10] <- NA
dredge_fit_2$index.mat[!is.na(dredge_fit_2$index.mat)] <-
1:length(dredge_fit_2$index.mat[!is.na(dredge_fit_2$index.mat)])
dredge_fit_2
dredge_fit_2$index.mat
dredge_fit_2$solution[dredge_fit_2$solution < 1e-10] <- NA
dredge_fit_3$index.mat[dredge_fit_3$solution < 1e-10] <- NA
dredge_fit_3$index.mat[!is.na(dredge_fit_3$index.mat)] <-
1:length(dredge_fit_3$index.mat[!is.na(dredge_fit_3$index.mat)])
dredge_fit_3$solution[dredge_fit_3$solution < 1e-10] <- NA
dredge_1_profile <- corHMM:::get_batch_profile_lik(corhmm_obj = dredge_fit_1,
range_factor = 10000,
n_points = 20,
ncores = 10,
dredge = TRUE)
corHMM:::plot_batch_profile_lik(dredge_1_profile, ylim = c(-100, -41))
dredge_2_profile <- corHMM:::get_batch_profile_lik(corhmm_obj = dredge_fit_2,
range_factor = 1000,
n_points = 20,
ncores = 10,
dredge = TRUE)
corHMM:::plot_batch_profile_lik(dredge_2_profile, ylim = c(-100, -41))
dredge_fit_2
corHMM:::plot_batch_profile_lik(dredge_2_profile, ylim = c(-50, -38))
dredge_3_profile <- corHMM:::get_batch_profile_lik(corhmm_obj = dredge_fit_3,
range_factor = 1000,
n_points = 20,
ncores = 10,
dredge = TRUE)
dredge_3_profile
corHMM:::plot_batch_profile_lik(dredge_3_profile, ylim = c(-100, -41))
dredge_3_profile
corHMM:::plot_batch_profile_lik(dredge_3_profile, ylim = c(-60, -41))
dredge_fit_3
corHMM:::plot_batch_profile_lik(dredge_3_profile, ylim = c(-60, -37))
dredge_fit_1 <- corHMM:::corHMMDredge(phy = phy, data = data, 1, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps, lambda = 0.25)
dredge_fit_1
dredge_fit_1 <- corHMM:::corHMMDredge(phy = phy, data = data, 1, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps)
dredge_fit_1
dredge_fit_2
dredge_fit_3
opts <- list("algorithm"="DIRECT-L", "maxeval"="1000000", "ftol_rel"=.Machine$double.eps^0.5)
dredge_fit_1 <- corHMM:::corHMMDredge(phy = phy, data = data, 1, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps, opts=opts)
opts <- list("algorithm"="DIRECT", "maxeval"="1000000", "ftol_rel"=.Machine$double.eps^0.5)
dredge_fit_1 <- corHMM:::corHMMDredge(phy = phy, data = data, 1, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps, opts=opts)
opts <- list("algorithm"="NLOPT_GN_DIRECT_L", "maxeval"="1000000", "ftol_rel"=.Machine$double.eps^0.5)
dredge_fit_1 <- corHMM:::corHMMDredge(phy = phy, data = data, 1, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps, opts=opts)
dredge_fit_1
opts <- list("algorithm"="NLOPT_GN_DIRECT_L", "maxeval"="1000000", "ftol_rel"=.Machine$double.eps^0.5)
dredge_fit_1 <- corHMM:::corHMMDredge(phy = phy, data = data, 1, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps, opts=opts)
dredge_fit_1
par(mar=c(.1,.1,.1,.1))
plotRECON(dredge_fit_2$phy, dredge_fit_1$states, pie.cex = 1)
par(mar=c(.1,.1,.1,.1))
plotRECON(dredge_fit_2$phy, dredge_fit_1$states, pie.cex = 1)
dev.off()
par(mar=c(.1,.1,.1,.1))
plotRECON(dredge_fit_2$phy, dredge_fit_1$states, pie.cex = 1)
dredge_fit_1
opts <- list("algorithm"="NLOPT_GN_DIRECT", "maxeval"="1000000", "ftol_rel"=.Machine$double.eps^0.5)
dredge_fit_1 <- corHMM:::corHMMDredge(phy = phy, data = data, 1, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps, opts=opts)
dredge_fit_1
opts <- list("algorithm"="NLOPT_LN_SBPLX", "maxeval"="1000000", "ftol_rel"=.Machine$double.eps^0.5)
opts <- list("algorithm"="NLOPT_LN_SBPLX", "maxeval"="1000000", "ftol_rel"=.Machine$double.eps^0.5)
dredge_fit_1 <- corHMM:::corHMMDredge(phy = phy, data = data, 1, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps, opts=opts)
dredge_fit_1
opts <- list("algorithm"="NLOPT_GN_CRS2_LM", "maxeval"="1000000", "ftol_rel"=.Machine$double.eps^0.5)
dredge_fit_1 <- corHMM:::corHMMDredge(phy = phy, data = data, 1, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps, opts=opts)
dredge_fit_1
dredge_fit_2
opts
dredge_fit_2
dredge_fit_2 <- corHMM:::corHMMDredge(phy = phy, data = data, 2, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps, opts=opts)
dredge_fit_1
dredge_fit_2
par(mar=c(.1,.1,.1,.1))
plotRECON(dredge_fit_2$phy, dredge_fit_1$states, pie.cex = 1)
plotRECON(dredge_fit_2$phy, dredge_fit_2$states, pie.cex = 1)
dredge_fit_1$index.mat[dredge_fit_1$solution < 1e-10] <- NA
dredge_fit_1$index.mat[!is.na(dredge_fit_1$index.mat)] <-
1:length(dredge_fit_1$index.mat[!is.na(dredge_fit_1$index.mat)])
dredge_fit_1$solution[dredge_fit_1$solution < 1e-10] <- NA
dredge_fit_2$index.mat[dredge_fit_2$solution < 1e-10] <- NA
dredge_fit_2$index.mat[!is.na(dredge_fit_2$index.mat)] <-
1:length(dredge_fit_2$index.mat[!is.na(dredge_fit_2$index.mat)])
dredge_fit_2$solution[dredge_fit_2$solution < 1e-10] <- NA
dredge_fit_2
dredge_fit_1
library(corHMM)
data(primates)
phy <- multi2di(primates[[1]])
data <- primates[[2]]
library(dentist)
fn_corHMM <- function(par, phy, data, rate.cat){
corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 1, p = par)
loglik <- corhmm_fit$loglik
neg_loglik <- -loglik
return(neg_loglik)
}
fn_Dredge <- function(par, phy, data, rate.cat){
corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 1, p = par)
pen <- sum(log(par))
loglik <- corhmm_fit$loglik + pen
neg_loglik <- -loglik
return(neg_loglik)
}
phy$edge.length <- phy$edge.length + 2e-5
dredge_fit_1 <- corHMM:::corHMMDredge(phy = phy, data = data, 1, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps)
dredge_fit_1
dredge_fit_1$index.mat
library(corHMM)
data(primates)
phy <- multi2di(primates[[1]])
data <- primates[[2]]
library(dentist)
fn_corHMM <- function(par, phy, data, rate.cat){
corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 1, p = par)
loglik <- corhmm_fit$loglik
neg_loglik <- -loglik
return(neg_loglik)
}
fn_Dredge <- function(par, phy, data, rate.cat){
corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 1, p = par)
pen <- sum(log(par))
loglik <- corhmm_fit$loglik + pen
neg_loglik <- -loglik
return(neg_loglik)
}
phy$edge.length <- phy$edge.length + 2e-5
dredge_fit_1 <- corHMM:::corHMMDredge(phy = phy, data = data, 1, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps)
dredge_fit_1
dredge_fit_2 <- corHMM:::corHMMDredge(phy = phy, data = data, 2, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps)
dredge_fit_2
dredge_fit_1
# corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 2)
dredge_fit_3 <- corHMM:::corHMMDredge(phy = phy, data = data, 3, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps)
dredge_fit_3
dredge_fit_1
dredge_fit_2
dredge_fit_3
par(mar=c(.1,.1,.1,.1))
plotRECON(dredge_fit_2$phy, dredge_fit_2$states, pie.cex = 1)
par(mar=c(.1,.1,.1,.1), mfrow=c(1,3))
plotRECON(dredge_fit_2$phy, dredge_fit_1$states, pie.cex = 1, show.tip.label = FALSE)
plotRECON(dredge_fit_2$phy, dredge_fit_2$states, pie.cex = 1, show.tip.label = FALSE)
plotRECON(dredge_fit_2$phy, dredge_fit_3$states, pie.cex = 1, show.tip.label = FALSE)
dev.off()
plotRECON(dredge_fit_2$phy, dredge_fit_3$states, pie.cex = 1, show.tip.label = FALSE)
dredge_fit_3$states
dredge_fit_2$states
dredge_fit_1$states
apply(dredge_fit_1$states, 1, which.max)
apply(dredge_fit_2$states, 1, which.max)
apply(dredge_fit_3$states, 1, which.max)
cbind(
d1 = apply(dredge_fit_1$states, 1, which.max),
d2 = apply(dredge_fit_2$states, 1, which.max),
d3 = apply(dredge_fit_3$states, 1, which.max)
)
dredge_fit_3
dredge_fit_1
dredge_fit_2
corHMM:::getModelTable(list(dredge_fit_1, dredge_fit_2, dredge_fit_3))
dredge_fit_2
# corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 2)
dredge_fit_4 <- corHMM:::corHMMDredge(phy = phy, data = data, 4, nstarts = 10, n.cores = 10, lower.bound = .Machine$double.eps)
dredge_fit_4
plotRECON(dredge_fit_2$phy, dredge_fit_3$states, pie.cex = 1, show.tip.label = FALSE)
plotRECON(dredge_fit_2$phy, dredge_fit_4$states, pie.cex = 1, show.tip.label = FALSE)
d4 = apply(dredge_fit_3$states, 1, which.max)
d4
cbind(
d1 = apply(dredge_fit_1$states, 1, which.max),
d2 = apply(dredge_fit_2$states, 1, which.max),
d3 = apply(dredge_fit_3$states, 1, which.max),
d4 = apply(dredge_fit_3$states, 1, which.max)
)
dredge_fit_4
dredge_fit_3
corHMM:::getModelTable(list(dredge_fit_1, dredge_fit_2, dredge_fit_3, dredge_fit_4))
getModelTable
corHMM:::getModelTable
dredge_fit_1
tree <- makeSimmap(tree = dredge_fit_2$phy, dredge_fit_2$data, dredge_fit_3$solution, 3, "maddfitz")
phytools:::plotSimmap(tree[[1]])
dredge_fit_3$solution
tree <- makeSimmap(tree = dredge_fit_2$phy, dredge_fit_2$data, dredge_fit_1$solution, 3, "maddfitz")
phytools:::plotSimmap(tree[[1]])
tree <- makeSimmap(tree = dredge_fit_2$phy, dredge_fit_2$data, dredge_fit_1$solution, 1, "maddfitz")
phytools:::plotSimmap(tree[[1]])
?phytools:::plotSimmap(tree[[1]])
trees <- makeSimmap(tree = dredge_fit_2$phy, dredge_fit_2$data, dredge_fit_1$solution, 1, "maddfitz", nSim = 100)
phytools:::densityMap(trees)
warnings()
trees
trees[[1]]
trees[[2]]
trees[[3]]
phytools:::densityMap
debug(phytools:::densityMap)
phytools:::densityMap(trees)
h
trees
trees
ss
is.null(states)
ss
ss
undebug(phytools:::densityMap)
dredge_fit_1$solution
rownames(dredge_fit_1$solution)
phytools:::densityMap(trees, states = rownames(dredge_fit_1$solution))
warnings()
debug(phytools:::densityMap)
phytools:::densityMap(trees, states = rownames(dredge_fit_1$solution))
hasArg(states)
states
is.null(states)
ss
ss == c("0", "1")
all(ss == c("0", "1")
)
c1
paste(sample(c(letters, LETTERS), 6), collapse = "")
mergeMappedStates
ss == c("0", "1")
all(ss == c("0", "1")
all(ss == c("0", "1"))
all(ss == c("0", "1"))
all(ss == c("0", "1"))
!all(ss == c("0", "1"))
!all(ss == c("0", "1"))
!all(ss == c("0", "1"))
!all(ss == c("0", "1"))
YY
warnings()
YY
warnings()
undebug(phytools:::densityMap)
phytools:::plotSimmap
phytools:::plotSimmap(trees, states = rownames(dredge_fit_1$solution))
phytools:::plotSimmap(trees)
trees <- makeSimmap(tree = dredge_fit_2$phy, dredge_fit_2$data, dredge_fit_2$solution, 2, "maddfitz", nSim = 100)
phytools:::plotSimmap(trees)
?phytools:::plotSimmap(trees)
phytools:::describe.simmap(trees)
trees <- makeSimmap(tree = dredge_fit_2$phy, dredge_fit_2$data, dredge_fit_1$solution, 1, "maddfitz", nSim = 100)
phytools:::describe.simmap(trees)
trees <- makeSimmap(tree = dredge_fit_2$phy, dredge_fit_2$data, dredge_fit_1$solution, 1, "maddfitz", nSim = 500)
phytools:::describe.simmap(trees)
corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 1)
trees <- makeSimmap(tree = dredge_fit_2$phy, dredge_fit_2$data, corhmm_fit$solution, 1, "maddfitz", nSim = 500)
phytools:::describe.simmap(trees)
trees
corhmm_fit$solution
corhmm_fit <- corHMM(phy = phy, data = data, rate.cat = 1, root.p="maddfitz")
corhmm_fit
trees <- makeSimmap(tree = dredge_fit_2$phy, dredge_fit_2$data, corhmm_fit$solution, 1, "maddfitz", nSim = 100)
phytools:::describe.simmap(trees)
trees <- makeSimmap(tree = dredge_fit_2$phy, dredge_fit_2$data, dredge_fit_1$solution, 1, "maddfitz", nSim = 100)
phytools:::describe.simmap(trees)
install.packages("plot3D")
library(plot3D)
devtools::install_github("cran/plot3D")
library(plot3D)
# Parameters for the circle
theta <- seq(0, 2*pi, length.out = 100)
x <- cos(theta)
y <- sin(theta)
z <- rep(0, length(x))  # All z-coordinates are 0, flat in the 3D space
# Plotting the embedded circle
scatter3D(x, y, z, colvar = z, pch = 19, colkey = FALSE, main = "Embedding of a Circle", xlab = "X", ylab = "Y", zlab = "Z")
# Modifying parameters for self-intersection
x2 <- cos(theta)
y2 <- sin(theta)
z2 <- sin(5*theta)  # Adding a sine wave along the z-axis to create intersections
# Plotting the immersed circle with intersections
scatter3D(x2, y2, z2, colvar = z2, pch = 19, colkey = FALSE, main = "Immersion of a Circle with Intersections", xlab = "X", ylab = "Y", zlab = "Z")
dev.off()
# simple 3 character simulation with binary states
setwd("~/corhmm-dredge/")
library(corHMM)
library(parallel)
library(MASS)
source("code/utils.R")
nSim <- 100
if (detectCores()>100){
mccores <- 50
}else{
mccores <- 4
}
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
phy <- trees[[1]]
# which simulation number
simulation <- "04"
overwrite <- TRUE
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
# creates an index mat appropriate for nchar, nstates, and nhidden
index_mat <- get_index_mat(nChar=3, nStates=2, nRateClass=1)
###### ###### ###### ###### parameter table generation ###### ###### ###### ######
file_found <- par_table_name %in% dir("parameter_tables/")
if(!file_found | overwrite){
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
write.csv(par_table, file = paste0("parameter_tables/", par_table_name), row.names = FALSE)
}else{
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
}
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
# let's create the full data strucutre now.
# a list with phy, sim pars, data
full_dat <- list()
count <- 1
for(i in trees){
for(j in i){
for(k in rate_mats){
tmp <- list(phy = j, par = k, dat = NULL)
full_dat[[count]] <- tmp
count <- count+1
}
}
}
###### ###### ###### ###### data simulation ###### ###### ###### ######
file_found <- full_dat_name %in% dir("data/")
if(!file_found | overwrite){
for(i in 1:length(full_dat)){
cat("\r", i, "out of", length(full_dat), "...    ")
full_dat[[i]]$dat <- get_sim_data(full_dat[[i]]$phy, full_dat[[i]]$par, index_mat)
full_dat[[i]]$cor_dat <- get_formatted_data(full_dat[[i]]$dat, index_mat)
}
saveRDS(full_dat, file = paste0("data/", full_dat_name))
}else{
full_dat <- readRDS(paste0("data/", full_dat_name))
}
get_sim_data(full_dat[[i]]$phy, full_dat[[i]]$par, index_mat)
full_dat[[i]]$dat <- get_sim_data(full_dat[[i]]$phy, full_dat[[i]]$par, index_mat)
get_formatted_data(full_dat[[i]]$dat, index_mat)
full_dat[[i]]$dat
index_mat
get_formatted_data
full_dat[[i]]$dat, index_mat
full_dat[[i]]$dat
index_mat
full_dat[[i]]$dat
full_dat[[i]]$cor_dat
index_mat
full_dat[[i]]$dat
get_formatted_data
full_dat[[i]]$dat
full_dat[[i]]$dat
index_mat
debug(get_formatted_data)
get_formatted_data(full_dat[[i]]$dat, index_mat)
tip_states
get_formatted_data(full_dat[[i]]$dat, index_mat)
tip_states
gsub("\\)", "", tip_states
)
gsub("\\)", "", tip_states)
tip_states
tip_data
tip_data
tip_states <- sapply(tip_data, function(x) colnames(index_mat$full_rate_mat)[x])
tip_states
as.factor(tip_data)
levels(as.factor(tip_data))
as.factor(tip_data)
tip_states
full_dat[[i]]$dat
full_dat[[i]]$dat$TipStates
index_mat
rownames(index_mat$full_rate_mat)[full_dat[[i]]$dat$TipStates]
tip_states
tip_states <- rownames(index_mat$full_rate_mat)[full_dat[[i]]$dat$TipStates]
tip_states
strsplit(tip_states, "|")
do.call(rbind, strsplit(tip_states, "|"))
do.call(rbind, strsplit(tip_states, "|"))[,c(1,3,5)]
cor_dat <- do.call(rbind, strsplit(tip_states, "|"))[,c(1,3,5)]
cor_dat
head(cor_dat)
cor_dat <- as.factor(do.call(rbind, strsplit(tip_states, "|"))[,c(1,3,5)])
cor_dat
do.call(rbind, strsplit(tip_states, "|"))[,c(1,3,5)]
cor_dat <- do.call(rbind, strsplit(tip_states, "|"))[,c(1,3,5)]
cor_dat
cor_dat <- as.numeric(do.call(rbind, strsplit(tip_states, "|"))[,c(1,3,5)])
cor_dat
strsplit(tip_states, "|")
cor_dat <- do.call(rbind, strsplit(tip_states, "|"))[,c(1,3,5)]
full_dat[[i]]$dat$TipStates
cbind(sp = names(full_dat[[i]]$dat$TipStates), cor_dat)
do.call(rbind, strsplit(tip_states, "|"))[,c(1,3,5)]
tmp_dat <- do.call(rbind, strsplit(tip_states, "|"))[,c(1,3,5)]
tmp_dat
factor(tmp_dat[,1], c(1,2))
cor_dat <- data.frame(sp = names(full_dat[[i]]$dat$TipStates),
x1 = factor(tmp_dat[,1], c(1,2)),
x2 = factor(tmp_dat[,3], c(1,2)),
x3 = factor(tmp_dat[,5], c(1,2)))
tmp_dat[,5]
cor_dat <- data.frame(sp = names(full_dat[[i]]$dat$TipStates),
x1 = factor(tmp_dat[,1], c(1,2)),
x2 = factor(tmp_dat[,2], c(1,2)),
x3 = factor(tmp_dat[,3], c(1,2)))
cor_dat
