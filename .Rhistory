setwd("~/corhmm-dredge/")
library(corHMM)
library(parallel)
library(MASS)
library(dplyr)
library(ggplot2)
library(tidyr)
source("code/utils.R")
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
phy <- trees[[1]]
nSim = 100
############### Simulation scenario 1 ####################
# which simulation number
simulation <- "01"
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
res_reg_name <- paste0("res_reg-", simulation, ".RDS")
res_unreg_name <- paste0("res_unreg-", simulation, ".RDS")
# load everything
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=1)
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
res_unreg <- readRDS(paste0("res/", res_unreg_name))
res_reg <- readRDS(paste0("res/", res_reg_name))
max_states_unreg <- lapply(res_unreg, function(x) apply(x$states, 1, which.max))
max_states_reg <- lapply(res_reg, function(x) apply(x$states, 1, which.max))
true_states <- lapply(full_dat, )
max_states_reg
max_states_unreg
max_states_reg
full_dat
true_states <- lapply(full_dat, "[[", "NodeStates")
true_states
max_states_reg
max_states_unreg
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
plot_data <- (cbind(df_unreg, df_reg))
colnames(plot_data) <- paste0(colnames(tmp), rep(c("-unreg", "-reg"), each = 2))
bias = colMeans(plot_data - cbind(par_table, par_table), na.rm = TRUE)
varr = apply(plot_data, 2, function(x) var(x, na.rm = TRUE))
mse = colMeans((plot_data - cbind(par_table, par_table))^2, na.rm = TRUE)
rmse = sqrt(colMeans((plot_data - cbind(par_table,par_table))^2, na.rm = TRUE))
print(t(data.frame(bias, varr, mse, rmse)))
plot_data_long <- pivot_longer(as.data.frame(plot_data), cols = everything())
plot_data_long <- data.frame(do.call(rbind, strsplit(plot_data_long$name, "-")), value = plot_data_long$value)
colnames(plot_data_long) <- c("trans", "type", "value")
ggplot(data = plot_data_long, aes(x = type, y = (value))) +
geom_boxplot() +
theme_minimal() +
facet_wrap(~trans)
max_states_unreg
max_states_reg
true_states
max_states_reg
max_states_unreg
max_states_unreg == true_states
mapply(function(x, y) x == y, x = max_states_unreg, y = true_states)
mapply(function(x, y) x == y, x = max_states_reg, y = true_states)
mapply(function(x, y) x == y, x = max_states_reg, y = true_states)
mapply(function(x, y) x == y, x = max_states_unreg, y = true_states)
which(mapply(function(x, y) x == y, x = max_states_unreg, y = true_states))
mapply(function(x, y) x == y, x = max_states_unreg, y = true_states)
table
table(mapply(function(x, y) x == y, x = max_states_unreg, y = true_states))
table(mapply(function(x, y) x == y, x = max_states_reg, y = true_states))
(mapply(function(x, y) x == y, x = max_states_unreg, y = true_states))
table(mapply(function(x, y) x == y, x = max_states_unreg, y = true_states))
table(mapply(function(x, y) x == y, x = max_states_reg, y = true_states))
############### Simulation scenario 2 ####################
# which simulation number
simulation <- "02"
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
res_reg_name <- paste0("res_reg-", simulation, ".RDS")
res_unreg_name <- paste0("res_unreg-", simulation, ".RDS")
# load everything
index_mat <- get_index_mat(nChar=2, nStates=2, nRateClass=1)
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
res_unreg <- readRDS(paste0("res/", res_unreg_name))
res_reg <- readRDS(paste0("res/", res_reg_name))
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
plot_data <- (cbind(df_unreg, df_reg))
colnames(plot_data) <- paste0(colnames(tmp), rep(c("-unreg", "-reg"), each = length(colnames(tmp))))
bias = colMeans(plot_data - cbind(par_table, par_table), na.rm = TRUE)
varr = apply(plot_data, 2, function(x) var(x, na.rm = TRUE))
mse = colMeans((plot_data - cbind(par_table, par_table))^2, na.rm = TRUE)
rmse = sqrt(colMeans((plot_data - cbind(par_table,par_table))^2, na.rm = TRUE))
print(t(data.frame(bias, varr, mse, rmse)))
plot_data_long <- pivot_longer(as.data.frame(plot_data), cols = everything())
plot_data_long <- data.frame(do.call(rbind, strsplit(plot_data_long$name, "-")), value = plot_data_long$value)
colnames(plot_data_long) <- c("trans", "type", "value")
ggplot(data = plot_data_long, aes(x = type, y = log(value))) +
geom_boxplot() +
theme_minimal() +
facet_wrap(~trans)
max_states_unreg <- lapply(res_unreg, function(x) apply(x$states, 1, which.max))
max_states_reg <- lapply(res_reg, function(x) apply(x$states, 1, which.max))
true_states <- lapply(full_dat, "[[", "NodeStates")
table(mapply(function(x, y) x == y, x = max_states_unreg, y = true_states))
table(mapply(function(x, y) x == y, x = max_states_reg, y = true_states))
############### Simulation scenario 3 ####################
# which simulation number
simulation <- "03"
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
res_reg_name <- paste0("res_reg-", simulation, ".RDS")
res_unreg_name <- paste0("res_unreg-", simulation, ".RDS")
# load everything
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=2)
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
res_unreg <- readRDS(paste0("res/", res_unreg_name))
res_reg <- readRDS(paste0("res/", res_reg_name))
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
plot_data <- (cbind(df_unreg, df_reg))
colnames(plot_data) <- paste0(colnames(tmp), rep(c("-unreg", "-reg"), each = length(colnames(tmp))))
bias = colMeans(plot_data - cbind(par_table, par_table), na.rm = TRUE)
varr = apply(plot_data, 2, function(x) var(x, na.rm = TRUE))
mse = colMeans((plot_data - cbind(par_table, par_table))^2, na.rm = TRUE)
rmse = sqrt(colMeans((plot_data - cbind(par_table,par_table))^2, na.rm = TRUE))
print(t(data.frame(bias, varr, mse, rmse)))
plot_data_long <- pivot_longer(as.data.frame(plot_data), cols = everything())
plot_data_long <- data.frame(do.call(rbind, strsplit(plot_data_long$name, "-")), value = plot_data_long$value)
colnames(plot_data_long) <- c("trans", "type", "value")
ggplot(data = plot_data_long, aes(x = type, y = log(value))) +
geom_boxplot() +
theme_minimal() +
facet_wrap(~trans)
max_states_unreg <- lapply(res_unreg, function(x) apply(x$states, 1, which.max))
max_states_reg <- lapply(res_reg, function(x) apply(x$states, 1, which.max))
true_states <- lapply(full_dat, "[[", "NodeStates")
table(mapply(function(x, y) x == y, x = max_states_unreg, y = true_states))
table(mapply(function(x, y) x == y, x = max_states_reg, y = true_states))
############### Simulation scenario 4 ####################
# which simulation number
simulation <- "04"
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
res_reg_name <- paste0("res_reg-", simulation, ".RDS")
res_unreg_name <- paste0("res_unreg-", simulation, ".RDS")
# load everything
index_mat <- get_index_mat(nChar=3, nStates=2, nRateClass=1)
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
res_unreg <- readRDS(paste0("res/", res_unreg_name))
res_reg <- readRDS(paste0("res/", res_reg_name))
df_unreg <- do.call(rbind, lapply(res_unreg, function(x)
get_solution_from_res(x, index_mat$full_rate_mat)))
df_reg <- do.call(rbind, lapply(res_reg, function(x)
get_solution_from_res(x, index_mat$full_rate_mat)))
plot_data <- (cbind(df_unreg, df_reg))
colnames(plot_data) <- paste0(colnames(tmp), rep(c("-unreg", "-reg"), each = length(colnames(tmp))))
bias = colMeans(plot_data - cbind(par_table, par_table), na.rm = TRUE)
varr = apply(plot_data, 2, function(x) var(x, na.rm = TRUE))
mse = colMeans((plot_data - cbind(par_table, par_table))^2, na.rm = TRUE)
rmse = sqrt(colMeans((plot_data - cbind(par_table,par_table))^2, na.rm = TRUE))
print(t(data.frame(bias, varr, mse, rmse)))
plot_data_long <- pivot_longer(as.data.frame(plot_data), cols = everything())
plot_data_long <- data.frame(do.call(rbind, strsplit(plot_data_long$name, "-")), value = plot_data_long$value)
colnames(plot_data_long) <- c("trans", "type", "value")
ggplot(data = plot_data_long, aes(x = type, y = log(value))) +
geom_violin() +
theme_minimal() +
facet_wrap(~trans)
max_states_unreg <- lapply(res_unreg, function(x) apply(x$states, 1, which.max))
max_states_reg <- lapply(res_reg, function(x) apply(x$states, 1, which.max))
true_states <- lapply(full_dat, "[[", "NodeStates")
table(mapply(function(x, y) x == y, x = max_states_unreg, y = true_states))
table(mapply(function(x, y) x == y, x = max_states_reg, y = true_states))
max_states_unreg
max_states_reg
res_unreg
res_reg
print(t(data.frame(bias, varr, mse, rmse)))
