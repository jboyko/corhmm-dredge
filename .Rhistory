table(dat$TipStates)
eq_freq <- c(Null(rate_mat))
dat <- corHMM:::simMarkov(phy, rate_mat, eq_freq)
table(dat$TipStates)
eq_freq <- c(Null(rate_mat))
dat <- corHMM:::simMarkov(phy, rate_mat, eq_freq)
table(dat$TipStates)
eq_freq <- c(Null(rate_mat))
dat <- corHMM:::simMarkov(phy, rate_mat, eq_freq)
table(dat$TipStates)
eq_freq <- c(Null(rate_mat))
dat <- corHMM:::simMarkov(phy, rate_mat, eq_freq)
table(dat$TipStates)
eq_freq <- c(Null(rate_mat))
dat <- corHMM:::simMarkov(phy, rate_mat, eq_freq)
table(dat$TipStates)
eq_freq <- c(Null(rate_mat))
dat <- corHMM:::simMarkov(phy, rate_mat, eq_freq)
table(dat$TipStates)
eq_freq <- c(Null(rate_mat))
dat <- corHMM:::simMarkov(phy, rate_mat, eq_freq)
table(dat$TipStates)
eq_freq <- c(Null(rate_mat))
dat <- corHMM:::simMarkov(phy, rate_mat, eq_freq)
table(dat$TipStates)
eq_freq <- c(Null(rate_mat))
dat <- corHMM:::simMarkov(phy, rate_mat, eq_freq)
table(dat$TipStates)
eq_freq <- c(Null(rate_mat))
dat <- corHMM:::simMarkov(phy, rate_mat, eq_freq)
table(dat$TipStates)
eq_freq <- c(Null(rate_mat))
dat <- corHMM:::simMarkov(phy, rate_mat, eq_freq)
table(dat$TipStates)
index_mat
table(dat$TipStates)
index_mat
index_mat$legend
obs_states <- 1:length(index_mat$legend)
obs_states
index_mat$min_df
index_mat$full_rate_mat
tip_data <- dat$TipStates
tip_states <- sapply(tip_data, function(x) colnames(index_mat$full_rate_mat)[x])
tip_states
gsub(",.", "", tip_states)
gsub(",.*", "", tip_states)
tip_states <- gsub(",.*", "", tip_states)
tip_states <- gsub"(", "", tip_states)
tip_states <- gsub("(", "", tip_states)
tip_states <- gsub("(", "", tip_states)
tip_states <- gsub("\\(", "", tip_states)
tip_states
tip_states <- as.numeric(gsub("\\(", "", tip_states))
tip_states
index_mat$legend
tip_states
index_mat$legend[tip_states]
obs_states <- index_mat$legend[tip_states]
obs_states
tip_states
obs_states
obs_states
strsplit(obs_states, "_")
do.call(rbind, strsplit(obs_states, "_"))
as.numeric(do.call(rbind, strsplit(obs_states, "_")))
do.call(rbind, strsplit(obs_states, "_"))
cor_dat <- do.call(rbind, strsplit(obs_states, "_"))
cor_dat
tip_data
cor_dat <- data.frame(sp=names(tip_data), do.call(rbind, strsplit(obs_states, "_")))
cor_dat
rownames(cor_dat) <- NULL
table(cor_dat[,-1])
cor_dat[,-1]
table(cor_dat[,-1])
tip_states
table(tip_states)
cor_dat
index_mat
rate_mat
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
# simulate data
full_dat <- lapply(rate_mats, function(x) get_sim_data(trees[[1]], x, index_mat))
full_dat
source("~/corhmm-dredge/code/utils.R")
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
cor_dat
# simulate data
full_dat <- lapply(rate_mats, function(x) get_sim_data(trees[[1]], x, index_mat))
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
cor_dat
nHidden
nHidden = 1
# creates an index mat appropriate for nchar, nstates, and nhidden
index_mat <- get_index_mat(simulation, nChar, nStates, nHidden)
index_mat
# samples the possible parameter values
par_table <- get_par_table(index_mat, nSim)
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
rate_mat = rate_mats[[1]]
# simulate data
full_dat <- lapply(rate_mats, function(x) get_sim_data(trees[[1]], x, index_mat))
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
cor_dat
full_dat
debug(get_formatted_data)
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
tip_data
tip_states
tip_states
tip_states
source("~/corhmm-dredge/code/utils.R")
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
cor_dat
debug(get_formatted_data)
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
tip_states
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
cor_dat
# fit model to data
res_unreg <- mclapply(cor_dat, function(x)
corHMM(phy, x, 1),
mc.cores = 10)
res_reg <- mclapply(cor_dat, function(x)
corHMM:::corHMMDredge(phy, x, 1, pen_type = "logl1"),
mc.cores = 10)
res_unreg
res_reg
res_reg[[94]]
res_unreg[[94]]
rate_mats[[94]]
rate_mats[[84]]
index_mat$min_df
rate_mats[[84]]
res_unreg[[84]]
res_reg[[84]]
res_reg[[74]]
res_unreg[[74]]
rate_mats[[74]]
# creates an index mat appropriate for nchar, nstates, and nhidden
index_mat <- get_index_mat(simulation=1, nChar=1, nStates=2, nHidden=1)
index_mat
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
# samples the possible parameter values
par_table <- get_par_table(index_mat, nSim)
par_table
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
rate_mat = rate_mats[[1]]
rate_mat
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
# samples the possible parameter values
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
rate_mat = rate_mats[[1]]
rate_mat
# samples the possible parameter values
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
rate_mat = rate_mats[[1]]
rate_mat
rate_mats
rate_mat
rate_mats
# simulate data
full_dat <- lapply(rate_mats, function(x) get_sim_data(trees[[1]], x, index_mat))
full_dat
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
cor_dat
c("sp", 1:index_mat$nChar)
source("~/corhmm-dredge/code/utils.R")
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
cor_dat
# fit model to data
res_unreg <- mclapply(cor_dat, function(x)
corHMM(phy, x, 1),
mc.cores = 10)
res_reg <- mclapply(cor_dat, function(x)
corHMM:::corHMMDredge(phy, x, 1, pen_type = "logl1"),
mc.cores = 10)
df_unreg <- do.call(rbind, lapply(res_unreg, function(x) c(x$solution)[c(3,2)]))
df_reg <- do.call(rbind, lapply(res_reg, function(x) c(x$solution)[c(3,2)]))
plot_data <- (cbind(df_unreg, df_reg))
colnames(plot_data) <- c("01_unreg", "10_unreg", "01_reg", "10_reg")
bias = colMeans(plot_data) - 1
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - 1)^2)
rmse = sqrt(colMeans((plot_data - 1)^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(plot_data); abline(h = 1)
res = res_unreg
?ancRECON
p <- sapply(1:max(res$index.mat, na.rm = TRUE), function(x)
na.omit(c(res$solution))[na.omit(c(res$index.mat) == x)][1])
res
res = res_unreg[[1]]
p <- sapply(1:max(res$index.mat, na.rm = TRUE), function(x)
na.omit(c(res$solution))[na.omit(c(res$index.mat) == x)][1])
p
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
df_unreg
df_reg
res$index.mat
max(res$index.mat, na.rm = TRUE)
source("~/corhmm-dredge/code/utils.R")
i=1
which(res$index.mat == i)
which(res$index.mat == i, arr.ind = TRUE)
res$index.mat
which(res$index.mat == i)
res$index.mat[which(res$index.mat == i)]
res$solution[which(res$index.mat == i)]
res$index.mat
res$solution
sapply(1:max(res$index.mat, na.rm = TRUE), function(x)
na.omit(c(res$solution))[na.omit(c(res$index.mat) == x)][1])
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
df_reg
df_unreg
plot_data <- (cbind(df_unreg, df_reg))
colnames(plot_data) <- c("01_unreg", "10_unreg", "01_reg", "10_reg")
bias = colMeans(plot_data) - 1
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - 1)^2)
rmse = sqrt(colMeans((plot_data - 1)^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(plot_data); abline(h = 1)
# simple two state simulation
setwd("~/corhmm-dredge/")
library(corHMM)
library(parallel)
library(MASS)
source("code/utils.R")
# creates an index mat appropriate for nchar, nstates, and nhidden
index_mat <- get_index_mat(simulation=1, nChar=2, nStates=2, nHidden=1)
# samples the possible parameter values
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
rate_mat = rate_mats[[1]]
# simulate data
full_dat <- lapply(rate_mats, function(x) get_sim_data(trees[[1]], x, index_mat))
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
cor_dat
full_dat
lapply(full_dat, function(x) tble(x$TipStates))
lapply(full_dat, function(x) table(x$TipStates))
cor_dat
full_dat
# fit model to data
res_unreg <- mclapply(cor_dat, function(x)
corHMM(phy, x, 1),
mc.cores = 10)
res_unreg
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_unreg
res_reg <- mclapply(cor_dat, function(x)
corHMM:::corHMMDredge(phy, x, 1, pen_type = "logl1"),
mc.cores = 10)
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
plot_data <- (cbind(df_unreg, df_reg))
plot_data
bias = colMeans(plot_data - cbind(par_table, par_table))
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - cbind(par_table, par_table))^2)
rmse = sqrt(colMeans((plot_data - cbind(par_table, par_table))^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(plot_data); abline(h = colMeans(par_table))
bias = colMeans(log(plot_data) - log(cbind(par_table, par_table)))
varr = apply(log(plot_data), 2, var)
mse = colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2)
rmse = sqrt(colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(plot_data); abline(h = colMeans(log(par_table)))
bias = colMeans(log(plot_data) - log(cbind(par_table, par_table)))
varr = apply(log(plot_data), 2, var)
mse = colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2)
rmse = sqrt(colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(log(plot_data)); abline(h = colMeans(log(par_table)))
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
plot_data <- (cbind(df_unreg, df_reg))
bias = colMeans(plot_data - cbind(par_table, par_table))
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - cbind(par_table, par_table))^2)
rmse = sqrt(colMeans((plot_data - cbind(par_table, par_table))^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(plot_data); abline(h = colMeans(par_table))
colMeans(par_table)
# simple two state simulation with hmms
setwd("~/corhmm-dredge/")
library(corHMM)
library(parallel)
library(MASS)
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
# creates an index mat appropriate for nchar, nstates, and nhidden
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=2)
index_mat
# samples the possible parameter values
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
# simulate data
full_dat <- lapply(rate_mats, function(x) get_sim_data(trees[[1]], x, index_mat))
full_dat
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
cor_dat
# fit model to data
res_unreg <- mclapply(cor_dat, function(x)
corHMM(phy, x, 2),
mc.cores = 10)
res_reg <- mclapply(cor_dat, function(x)
corHMM:::corHMMDredge(phy, x, 2, pen_type = "logl1"),
mc.cores = 10)
res_reg
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
plot_data <- (cbind(df_unreg, df_reg))
bias = colMeans(plot_data - cbind(par_table, par_table))
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - cbind(par_table, par_table))^2)
rmse = sqrt(colMeans((plot_data - cbind(par_table, par_table))^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(plot_data); abline(h = colMeans(par_table))
bias = colMeans(log(plot_data) - log(cbind(par_table, par_table)))
varr = apply(log(plot_data), 2, var)
mse = colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2)
rmse = sqrt(colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(log(plot_data)); abline(h = colMeans(log(par_table)))
par_table
colMeans(par_table)
colMeans(plot_data)
df_reg
index_mat
par_table
# modify for hidden states
par_table[,c(1,2)] <- par_table[,c(1,2)] * 5
par_table[,c(3,4)] <- par_table[,c(3,4)] / 5
par_table
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
# samples the possible parameter values
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
# modify for hidden states
par_table[,c(1,2)] <- par_table[,c(1,2)] * 5
par_table[,c(3,4)] <- par_table[,c(3,4)] / 5
par_table[,c(5,6)] <- par_table[,c(5,6)] * 2
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
# simulate data
full_dat <- lapply(rate_mats, function(x) get_sim_data(trees[[1]], x, index_mat))
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
# fit model to data
res_unreg <- mclapply(cor_dat, function(x)
corHMM(phy, x, 2),
mc.cores = 10)
full_dat
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
cor_dat
# fit model to data
res_unreg <- mclapply(cor_dat, function(x)
corHMM(phy, x, 2),
mc.cores = 10)
res_reg <- mclapply(cor_dat, function(x)
corHMM:::corHMMDredge(phy, x, 2, pen_type = "logl1"),
mc.cores = 10)
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
plot_data <- (cbind(df_unreg, df_reg))
bias = colMeans(plot_data - cbind(par_table, par_table))
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - cbind(par_table, par_table))^2)
rmse = sqrt(colMeans((plot_data - cbind(par_table, par_table))^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(plot_data); abline(h = colMeans(par_table))
bias = colMeans(log(plot_data) - log(cbind(par_table, par_table)))
varr = apply(log(plot_data), 2, var)
mse = colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2)
rmse = sqrt(colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(log(plot_data)); abline(h = colMeans(log(par_table)))
colMeans(par_table)
colMeans(plot_data)
plot_data
df_reg
df_unreg
df_reg
plot_data <- (cbind(df_unreg, df_reg))
colMeans(plot_data)
colMeans(df_reg)
res_reg <- mclapply(cor_dat, function(x)
corHMM:::corHMMDredge(phy, x, 2, pen_type = "logl1", lambda = 0.5),
mc.cores = 10)
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
plot_data <- (cbind(df_unreg, df_reg))
bias = colMeans(plot_data - cbind(par_table, par_table))
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - cbind(par_table, par_table))^2)
rmse = sqrt(colMeans((plot_data - cbind(par_table, par_table))^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(plot_data); abline(h = colMeans(par_table))
bias = colMeans(log(plot_data) - log(cbind(par_table, par_table)))
varr = apply(log(plot_data), 2, var)
mse = colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2)
rmse = sqrt(colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(log(plot_data)); abline(h = colMeans(log(par_table)))
colMeans(par_table)
colMeans(plot_data)
res_reg
t(data.frame(bias, varr, mse, rmse))
bias = colMeans(log(plot_data) - log(cbind(par_table, par_table)))
varr = apply(log(plot_data), 2, var)
mse = colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2)
rmse = sqrt(colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2))
t(data.frame(bias, varr, mse, rmse))
res_reg <- mclapply(cor_dat, function(x)
corHMM:::corHMMDredge(phy, x, 2, pen_type = "logl1", lambda = 0.25),
mc.cores = 10)
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
plot_data <- (cbind(df_unreg, df_reg))
bias = colMeans(plot_data - cbind(par_table, par_table))
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - cbind(par_table, par_table))^2)
rmse = sqrt(colMeans((plot_data - cbind(par_table, par_table))^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(plot_data); abline(h = colMeans(par_table))
bias = colMeans(log(plot_data) - log(cbind(par_table, par_table)))
varr = apply(log(plot_data), 2, var)
mse = colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2)
rmse = sqrt(colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(log(plot_data)); abline(h = colMeans(log(par_table)))
colMeans(par_table)
colMeans(plot_data)
res_unreg_b <- mclapply(cor_dat, function(x)
corHMM(phy, x, 1),
mc.cores = 10)
lapply(res_unreg, function(x) x$AICc)
unlist(lapply(res_unreg, function(x) x$AICc))
unlist(lapply(res_unreg_b, function(x) x$AICc))
unlist(lapply(res_unreg_b, function(x) x$AICc)) - unlist(lapply(res_unreg, function(x) x$AICc))
hist(unlist(lapply(res_unreg_b, function(x) x$AICc)) - unlist(lapply(res_unreg, function(x) x$AICc)))
unlist(lapply(res_unreg_b, function(x) x$AICc)) - unlist(lapply(res_unreg, function(x) x$AICc))
which((unlist(lapply(res_unreg_b, function(x) x$AICc)) - unlist(lapply(res_unreg, function(x) x$AICc)))>0)
res_reg
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
df_reg
which((unlist(lapply(res_unreg_b, function(x) x$AICc)) - unlist(lapply(res_unreg, function(x) x$AICc)))>-2)
res_reg <- mclapply(cor_dat, function(x)
corHMM:::corHMMDredge(phy, x, 2, pen_type = "logl1", lambda = 1),
mc.cores = 10)
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
supp_hmm <- which((unlist(lapply(res_unreg_b, function(x) x$AICc)) - unlist(lapply(res_unreg, function(x) x$AICc)))>-2)
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
plot_data <- (cbind(df_unreg, df_reg))
bias = colMeans(plot_data - cbind(par_table, par_table))
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - cbind(par_table, par_table))^2)
rmse = sqrt(colMeans((plot_data - cbind(par_table, par_table))^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(plot_data); abline(h = colMeans(par_table))
bias = colMeans(log(plot_data) - log(cbind(par_table, par_table)))
varr = apply(log(plot_data), 2, var)
mse = colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2)
rmse = sqrt(colMeans((log(plot_data) - log(cbind(par_table, par_table)))^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(log(plot_data)); abline(h = colMeans(log(par_table)))
colMeans(par_table)
colMeans(plot_data)
plot_data[supp_hmm,]
plot_data[df_reg,]
df_reg[supp_hmm,]
