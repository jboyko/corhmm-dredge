edge_i = 71
n_slice
(phy$edge.length[edge_i]%/%time_slice) +
2
edge_liks_list
edge_liks_list[[edge_i]]
tmp
phy$tip.label[phy$edge[edge_i, 2]]
data[data[, 1] == species_i, 2]
data[, 1]
data[, 1] == species_i
any(data[, 1] == species_i)
species_i
species_i %in% phy$tip.label
species_i %in% data[, 1]
dim(data)
phy
data[data[, 1] == species_i, 2]
state_i <- data[data[, 1] == species_i, 2]
state_i
as.numeric(unlist(strsplit(as.character(state_i),
"&")))
state_i_index <- as.numeric(unlist(strsplit(as.character(state_i),
"&")))
tmp[state_i_index]
tmp
edge_liks_list[[edge_i]][1, ]
species_i
data[,1]
species_i %in% data[,1]
!species_i %in% data[,1]
devtools::load_all("~/OUwie/")
load("~/Downloads/bad2.rda")
head(data)
factor(data$Reg)[]
debug(hOUwie)
hOUwie(phy, data, 1, "ER", "OUM")
edge_liks_list
edge_liks_list[[71]]
devtools::load_all("OUwie/")
BM1_CID <- hOUwie(tree, trait, rate.cat=2, discrete_model="ARD", continuous_model="BM1", diagn_msg = TRUE, nSim=1)
load("~/Downloads/test_tree.RData")
dat <- read.csv("~/Downloads/test.csv")
head(dat)
BM1_CID <- hOUwie(tree, trait, rate.cat=2, discrete_model="ARD", continuous_model="BM1", diagn_msg = TRUE, nSim=1)
trait <- read.csv("~/Downloads/test.csv")
BM1_CID <- hOUwie(tree, trait, rate.cat=2, discrete_model="ARD", continuous_model="BM1", diagn_msg = TRUE, nSim=1)
BM1_CID
OU1_CID <- hOUwie(tree, trait, rate.cat=2, discrete_model="ARD", continuous_model="OU1", diagn_msg=TRUE, nSim=1)
CID_model_set <- list(BM1_CID=BM1_CID, OU1_CID=OU1_CID)
#getModelTable(CID_model_set, type="AIC")
getModelAvgParams(CID_model_set)
BM1_CID <- hOUwie(tree, trait, rate.cat=2, discrete_model="ARD", continuous_model="BM1", diagn_msg = TRUE, nSim=2)
OU1_CID <- hOUwie(tree, trait, rate.cat=2, discrete_model="ARD", continuous_model="OU1", diagn_msg=TRUE, nSim=2)
CID_model_set <- list(BM1_CID=BM1_CID, OU1_CID=OU1_CID)
#getModelTable(CID_model_set, type="AIC")
getModelAvgParams(CID_model_set)
round(getModelAvgParams(CID_model_set)
, 3)
round(getModelAvgParams(CID_model_set), 3)
library(SegmentR)
?grounded_segmentation_cli
search_conda_locations()
SegmentR:::search_conda_locations()
SegmentR:::search_conda_locations
setup_conda_environment
Sys.which("conda")
conda_path <- search_conda_locations()
.Platform$OS.type
sprintf('%s env list | findstr "%s"', conda_path, conda_env)
conda_path <- SegmentR:::search_conda_locations()
conda_path <- "blah/"
conda_env <- "bleh"
sprintf('%s env list | grep -q "%s"', conda_path, conda_env)
sprintf('%s env list | findstr "%s"', conda_path, conda_env)
devtools::install_github("jboyko/SegmentR")
SegmentR:::search_conda_locations()
conda_path <- SegmentR:::search_conda_locations()
conda_env = "segmentr-env"
conda_path
sprintf('%s env list | grep -q "%s"', conda_path, conda_env)
cmd_check_env
sprintf('%s env list | findstr "%s"', conda_path, conda_env)
cmd_check_env <- sprintf('%s env list | findstr "%s"', conda_path, conda_env)
.Platform$OS.type
.Platform
sin
sin(``)
sin(1)
sin(0)
sin(3.14)
sin(pi)
sin(pi/2)
plot(x = 1:100, y = sin(1:100))
plot(x = 1:100, y = sin(1:100), type = "l")
plot(x = 1:100/10, y = sin(1:100/10), type = "l")
plot(x = 0:100/10, y = sin(0:100/10), type = "l")
library(corHMM)
?ancRECON
data(primates)
phy <- multi2di(primates[[1]])
data <- primates[[2]]
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 1)
# # one way to get the parameters from your corHMM object in the correct order
p <- sapply(1:max(MK_3state$index.mat, na.rm = TRUE), function(x)
na.omit(c(MK_3state$solution))[na.omit(c(MK_3state$index.mat) == x)][1])
# using custom params
states_1 <- ancRECON(phy = phy, data = MK_3state$data, p = p, method = "marginal",
rate.cat <- MK_3state$rate.cat, ntraits = NULL, rate.mat = MK_3state$index.mat,
root.p = MK_3state$root.p)
# using custom params
states_1 <- ancRECON(phy = phy, data = MK_3state$data, p = p, method = "marginal",
rate.cat <- MK_3state$rate.cat, ntraits = NULL, rate.mat = MK_3state$index.mat,
root.p = MK_3state$root.p)
ancRECON
ancRECON(phy = phy, data = MK_3state$data, p = p, method = "marginal",
rate.cat <- MK_3state$rate.cat, ntraits = NULL, rate.mat = MK_3state$index.mat,
root.p = MK_3state$root.p)
setwd("~/corHMM//")
source("~/corhmm-dredge/code/utils.R")
devtools::load_all()
setwd("~/corhmm-dredge/")
#### #### #### #### #### dep model
results_files <- dir("~/corhmm-dredge/structure_results/dep_model/", full.names = TRUE)
results <- lapply(results_files, readRDS)
tmp_dat <- data.frame(sp = NA, expand.grid(list(c("Ovi", "Vivi"), c("Warm", "Cold"))))
index_mat <- getStateMat4Dat(tmp_dat)$rate.mat
results <- lapply(results, function(x)
t(data.frame(
l0 = model_test_dep(
x$corhmm_fits$l0[[which.min(getModelTable(x$corhmm_fits$l0)$dAIC)]],
index_mat),
l1 = model_test_dep(
x$corhmm_fits$l1[[which.min(getModelTable(x$corhmm_fits$l1)$dAIC)]],
index_mat),
l2 = model_test_dep(
x$corhmm_fits$l2[[which.min(getModelTable(x$corhmm_fits$l2)$dAIC)]],
index_mat),
er = model_test_dep(
x$corhmm_fits$er[[which.min(getModelTable(x$corhmm_fits$er)$dAIC)]],
index_mat),
sa = model_test_dep(
x$corhmm_fits$sa[[which.min(getModelTable(x$corhmm_fits$sa)$dAIC)]],
index_mat)
)))
# Combine results if needed
result_df_all <- do.call(rbind, results)
result_df_all
# how consistent are the results with the hypothesis?
test_summ <- t(data.frame(
l0=colSums(result_df_all[rownames(result_df_all) == "l0",])/(dim(result_df_all)[1]/5),
l1=colSums(result_df_all[rownames(result_df_all) == "l1",])/(dim(result_df_all)[1]/5),
l2=colSums(result_df_all[rownames(result_df_all) == "l2",])/(dim(result_df_all)[1]/5),
er=colSums(result_df_all[rownames(result_df_all) == "er",])/(dim(result_df_all)[1]/5),
sa=colSums(result_df_all[rownames(result_df_all) == "sa",])/(dim(result_df_all)[1]/5)
))
test_summ
write.csv(test_summ, "tables/test_summary_dep.csv")
mod_names <- rownames(result_df_all)
result_df_all <- as.data.frame(result_df_all, row.names = NA)
result_df_all$model <- mod_names
#### #### #### #### #### ord model
# Create a list of simulation numbers
sim_nums <- 1:100
results_files <- dir("~/corhmm-dredge/structure_results/ord_model/", full.names = TRUE)
results <- lapply(results_files, readRDS)
tmp_dat <- data.frame(sp = NA,
Self = factor(c("outx", "fac", "self"), c("outx", "fac", "self")))
index_mat <- getStateMat4Dat(tmp_dat)$rate.mat
index_mat <- dropStateMatPars(index_mat, c(5,2,4))
results <- lapply(results, function(x)
t(data.frame(
l0 = model_test_ord(
x$corhmm_fits$l0[[which.min(getModelTable(x$corhmm_fits$l0)$dAIC)]],
index_mat),
l1 = model_test_ord(
x$corhmm_fits$l1[[which.min(getModelTable(x$corhmm_fits$l1)$dAIC)]],
index_mat),
l2 = model_test_ord(
x$corhmm_fits$l2[[which.min(getModelTable(x$corhmm_fits$l2)$dAIC)]],
index_mat),
er = model_test_ord(
x$corhmm_fits$er[[which.min(getModelTable(x$corhmm_fits$er)$dAIC)]],
index_mat),
sa = model_test_ord(
x$corhmm_fits$sa[[which.min(getModelTable(x$corhmm_fits$sa)$dAIC)]],
index_mat)
)))
# Combine results if needed
result_df_all <- do.call(rbind, results)
# how consistent are the results with the hypothesis?
test_summ <- data.frame(
l0=colSums(result_df_all[rownames(result_df_all) == "l0",])/(dim(result_df_all)[1]/5),
l1=colSums(result_df_all[rownames(result_df_all) == "l1",])/(dim(result_df_all)[1]/5),
l2=colSums(result_df_all[rownames(result_df_all) == "l2",])/(dim(result_df_all)[1]/5),
er=colSums(result_df_all[rownames(result_df_all) == "er",])/(dim(result_df_all)[1]/5),
sa=colSums(result_df_all[rownames(result_df_all) == "sa",])/(dim(result_df_all)[1]/5)
)
test_summ
write.csv(test_summ, "tables/test_summary_ord.csv")
#### #### #### #### #### hmm model
sim_nums <- 1:100
results_files <- dir("~/corhmm-dredge/structure_results/hmm_model/", full.names = TRUE)
results <- lapply(results_files, readRDS)
tmp_dat <- data.frame(sp = NA, expand.grid(list(c("muted", "vivid"), c("0", "1"))))
index_mat <- getStateMat4Dat(tmp_dat)$rate.mat
index_mat <- equateStateMatPars(index_mat, list(c(2,4,5,7)))
results <- lapply(results, function(x)
t(data.frame(
l0 = model_test_hmm(
x$corhmm_fits$l0[[which.min(getModelTable(x$corhmm_fits$l0)$dAIC)]],
index_mat),
l1 = model_test_hmm(
x$corhmm_fits$l1[[which.min(getModelTable(x$corhmm_fits$l1)$dAIC)]],
index_mat),
l2 = model_test_hmm(
x$corhmm_fits$l2[[which.min(getModelTable(x$corhmm_fits$l2)$dAIC)]],
index_mat),
er = model_test_hmm(
x$corhmm_fits$er[[which.min(getModelTable(x$corhmm_fits$er)$dAIC)]],
index_mat),
sa = model_test_hmm(
x$corhmm_fits$sa[[which.min(getModelTable(x$corhmm_fits$sa)$dAIC)]],
index_mat)
)))
# Combine results if needed
result_df_all <- do.call(rbind, results)
# how consistent are the results with the hypothesis?
test_summ <- data.frame(
l0=colSums(result_df_all[rownames(result_df_all) == "l0",], T)/(dim(result_df_all)[1]/5),
l1=colSums(result_df_all[rownames(result_df_all) == "l1",], T)/(dim(result_df_all)[1]/5),
l2=colSums(result_df_all[rownames(result_df_all) == "l2",], T)/(dim(result_df_all)[1]/5),
er=colSums(result_df_all[rownames(result_df_all) == "er",], T)/(dim(result_df_all)[1]/5),
sa=colSums(result_df_all[rownames(result_df_all) == "sa",], T)/(dim(result_df_all)[1]/5)
)
test_summ
write.csv(test_summ, "tables/test_summary_hmm.csv")
round(test_summ, 3) * 100
setwd("~/corHMM//")
source("~/corhmm-dredge/code/utils.R")
devtools::load_all()
setwd("~/corhmm-dredge/")
#### #### #### #### #### dep model
results_files <- dir("~/corhmm-dredge/structure_results/dep_model/", full.names = TRUE)
results <- lapply(results_files, readRDS)
tmp_dat <- data.frame(sp = NA, expand.grid(list(c("Ovi", "Vivi"), c("Warm", "Cold"))))
index_mat <- getStateMat4Dat(tmp_dat)$rate.mat
results <- lapply(results, function(x)
t(data.frame(
l0 = model_test_dep(
x$corhmm_fits$l0[[which.min(getModelTable(x$corhmm_fits$l0)$dAIC)]],
index_mat),
l1 = model_test_dep(
x$corhmm_fits$l1[[which.min(getModelTable(x$corhmm_fits$l1)$dAIC)]],
index_mat),
l2 = model_test_dep(
x$corhmm_fits$l2[[which.min(getModelTable(x$corhmm_fits$l2)$dAIC)]],
index_mat),
er = model_test_dep(
x$corhmm_fits$er[[which.min(getModelTable(x$corhmm_fits$er)$dAIC)]],
index_mat),
sa = model_test_dep(
x$corhmm_fits$sa[[which.min(getModelTable(x$corhmm_fits$sa)$dAIC)]],
index_mat)
)))
# Combine results if needed
result_df_all <- do.call(rbind, results)
# how consistent are the results with the hypothesis?
test_summ <- t(data.frame(
l0=colSums(result_df_all[rownames(result_df_all) == "l0",])/(dim(result_df_all)[1]/5),
l1=colSums(result_df_all[rownames(result_df_all) == "l1",])/(dim(result_df_all)[1]/5),
l2=colSums(result_df_all[rownames(result_df_all) == "l2",])/(dim(result_df_all)[1]/5),
er=colSums(result_df_all[rownames(result_df_all) == "er",])/(dim(result_df_all)[1]/5),
sa=colSums(result_df_all[rownames(result_df_all) == "sa",])/(dim(result_df_all)[1]/5)
))
test_summ
write.csv(test_summ, "tables/test_summary_dep.csv")
mod_names <- rownames(result_df_all)
result_df_all <- as.data.frame(result_df_all, row.names = NA)
result_df_all$model <- mod_names
#### #### #### #### #### ord model
# Create a list of simulation numbers
sim_nums <- 1:100
results_files <- dir("~/corhmm-dredge/structure_results/ord_model/", full.names = TRUE)
results <- lapply(results_files, readRDS)
tmp_dat <- data.frame(sp = NA,
Self = factor(c("outx", "fac", "self"), c("outx", "fac", "self")))
index_mat <- getStateMat4Dat(tmp_dat)$rate.mat
index_mat <- dropStateMatPars(index_mat, c(5,2,4))
results <- lapply(results, function(x)
t(data.frame(
l0 = model_test_ord(
x$corhmm_fits$l0[[which.min(getModelTable(x$corhmm_fits$l0)$dAIC)]],
index_mat),
l1 = model_test_ord(
x$corhmm_fits$l1[[which.min(getModelTable(x$corhmm_fits$l1)$dAIC)]],
index_mat),
l2 = model_test_ord(
x$corhmm_fits$l2[[which.min(getModelTable(x$corhmm_fits$l2)$dAIC)]],
index_mat),
er = model_test_ord(
x$corhmm_fits$er[[which.min(getModelTable(x$corhmm_fits$er)$dAIC)]],
index_mat),
sa = model_test_ord(
x$corhmm_fits$sa[[which.min(getModelTable(x$corhmm_fits$sa)$dAIC)]],
index_mat)
)))
# Combine results if needed
result_df_all <- do.call(rbind, results)
# how consistent are the results with the hypothesis?
test_summ <- t(data.frame(
l0=colSums(result_df_all[rownames(result_df_all) == "l0",])/(dim(result_df_all)[1]/5),
l1=colSums(result_df_all[rownames(result_df_all) == "l1",])/(dim(result_df_all)[1]/5),
l2=colSums(result_df_all[rownames(result_df_all) == "l2",])/(dim(result_df_all)[1]/5),
er=colSums(result_df_all[rownames(result_df_all) == "er",])/(dim(result_df_all)[1]/5),
sa=colSums(result_df_all[rownames(result_df_all) == "sa",])/(dim(result_df_all)[1]/5)
))
test_summ
write.csv(test_summ, "tables/test_summary_ord.csv")
#### #### #### #### #### hmm model
sim_nums <- 1:100
results_files <- dir("~/corhmm-dredge/structure_results/hmm_model/", full.names = TRUE)
results <- lapply(results_files, readRDS)
tmp_dat <- data.frame(sp = NA, expand.grid(list(c("muted", "vivid"), c("0", "1"))))
index_mat <- getStateMat4Dat(tmp_dat)$rate.mat
index_mat <- equateStateMatPars(index_mat, list(c(2,4,5,7)))
results <- lapply(results, function(x)
t(data.frame(
l0 = model_test_hmm(
x$corhmm_fits$l0[[which.min(getModelTable(x$corhmm_fits$l0)$dAIC)]],
index_mat),
l1 = model_test_hmm(
x$corhmm_fits$l1[[which.min(getModelTable(x$corhmm_fits$l1)$dAIC)]],
index_mat),
l2 = model_test_hmm(
x$corhmm_fits$l2[[which.min(getModelTable(x$corhmm_fits$l2)$dAIC)]],
index_mat),
er = model_test_hmm(
x$corhmm_fits$er[[which.min(getModelTable(x$corhmm_fits$er)$dAIC)]],
index_mat),
sa = model_test_hmm(
x$corhmm_fits$sa[[which.min(getModelTable(x$corhmm_fits$sa)$dAIC)]],
index_mat)
)))
# Combine results if needed
result_df_all <- do.call(rbind, results)
# how consistent are the results with the hypothesis?
test_summ <- t(data.frame(
l0=colSums(result_df_all[rownames(result_df_all) == "l0",], T)/(dim(result_df_all)[1]/5),
l1=colSums(result_df_all[rownames(result_df_all) == "l1",], T)/(dim(result_df_all)[1]/5),
l2=colSums(result_df_all[rownames(result_df_all) == "l2",], T)/(dim(result_df_all)[1]/5),
er=colSums(result_df_all[rownames(result_df_all) == "er",], T)/(dim(result_df_all)[1]/5),
sa=colSums(result_df_all[rownames(result_df_all) == "sa",], T)/(dim(result_df_all)[1]/5)
))
test_summ
write.csv(test_summ, "tables/test_summary_hmm.csv")
round(test_summ, 3) * 100
test_summ
t(data.frame(
l0=colSums(result_df_all[rownames(result_df_all) == "l0",])/(dim(result_df_all)[1]/5),
l1=colSums(result_df_all[rownames(result_df_all) == "l1",])/(dim(result_df_all)[1]/5),
l2=colSums(result_df_all[rownames(result_df_all) == "l2",])/(dim(result_df_all)[1]/5),
er=colSums(result_df_all[rownames(result_df_all) == "er",])/(dim(result_df_all)[1]/5),
sa=colSums(result_df_all[rownames(result_df_all) == "sa",])/(dim(result_df_all)[1]/5)
))
(data.frame(
l0=colSums(result_df_all[rownames(result_df_all) == "l0",])/(dim(result_df_all)[1]/5),
l1=colSums(result_df_all[rownames(result_df_all) == "l1",])/(dim(result_df_all)[1]/5),
l2=colSums(result_df_all[rownames(result_df_all) == "l2",])/(dim(result_df_all)[1]/5),
er=colSums(result_df_all[rownames(result_df_all) == "er",])/(dim(result_df_all)[1]/5),
sa=colSums(result_df_all[rownames(result_df_all) == "sa",])/(dim(result_df_all)[1]/5)
))
t(data.frame(
l0=colSums(result_df_all[rownames(result_df_all) == "l0",])/(dim(result_df_all)[1]/5),
l1=colSums(result_df_all[rownames(result_df_all) == "l1",])/(dim(result_df_all)[1]/5),
l2=colSums(result_df_all[rownames(result_df_all) == "l2",])/(dim(result_df_all)[1]/5),
er=colSums(result_df_all[rownames(result_df_all) == "er",])/(dim(result_df_all)[1]/5),
sa=colSums(result_df_all[rownames(result_df_all) == "sa",])/(dim(result_df_all)[1]/5)
))
(data.frame(
l0=colSums(result_df_all[rownames(result_df_all) == "l0",])/(dim(result_df_all)[1]/5),
l1=colSums(result_df_all[rownames(result_df_all) == "l1",])/(dim(result_df_all)[1]/5),
l2=colSums(result_df_all[rownames(result_df_all) == "l2",])/(dim(result_df_all)[1]/5),
er=colSums(result_df_all[rownames(result_df_all) == "er",])/(dim(result_df_all)[1]/5),
sa=colSums(result_df_all[rownames(result_df_all) == "sa",])/(dim(result_df_all)[1]/5)
))
(data.frame(
l0=colSums(result_df_all[rownames(result_df_all) == "l0",], T)/(dim(result_df_all)[1]/5),
l1=colSums(result_df_all[rownames(result_df_all) == "l1",], T)/(dim(result_df_all)[1]/5),
l2=colSums(result_df_all[rownames(result_df_all) == "l2",], T)/(dim(result_df_all)[1]/5),
er=colSums(result_df_all[rownames(result_df_all) == "er",], T)/(dim(result_df_all)[1]/5),
sa=colSums(result_df_all[rownames(result_df_all) == "sa",], T)/(dim(result_df_all)[1]/5)
))
setwd("~/corHMM//")
source("~/corhmm-dredge/code/utils.R")
devtools::load_all()
setwd("~/corhmm-dredge/")
#### #### #### #### #### dep model
results_files <- dir("~/corhmm-dredge/structure_results/dep_model/", full.names = TRUE)
results <- lapply(results_files, readRDS)
tmp_dat <- data.frame(sp = NA, expand.grid(list(c("Ovi", "Vivi"), c("Warm", "Cold"))))
index_mat <- getStateMat4Dat(tmp_dat)$rate.mat
results <- lapply(results, function(x)
t(data.frame(
l0 = model_test_dep(
x$corhmm_fits$l0[[which.min(getModelTable(x$corhmm_fits$l0)$dAIC)]],
index_mat),
l1 = model_test_dep(
x$corhmm_fits$l1[[which.min(getModelTable(x$corhmm_fits$l1)$dAIC)]],
index_mat),
l2 = model_test_dep(
x$corhmm_fits$l2[[which.min(getModelTable(x$corhmm_fits$l2)$dAIC)]],
index_mat),
er = model_test_dep(
x$corhmm_fits$er[[which.min(getModelTable(x$corhmm_fits$er)$dAIC)]],
index_mat),
sa = model_test_dep(
x$corhmm_fits$sa[[which.min(getModelTable(x$corhmm_fits$sa)$dAIC)]],
index_mat)
)))
# Combine results if needed
result_df_all <- do.call(rbind, results)
# how consistent are the results with the hypothesis?
test_summ <- (data.frame(
l0=colSums(result_df_all[rownames(result_df_all) == "l0",])/(dim(result_df_all)[1]/5),
l1=colSums(result_df_all[rownames(result_df_all) == "l1",])/(dim(result_df_all)[1]/5),
l2=colSums(result_df_all[rownames(result_df_all) == "l2",])/(dim(result_df_all)[1]/5),
er=colSums(result_df_all[rownames(result_df_all) == "er",])/(dim(result_df_all)[1]/5),
sa=colSums(result_df_all[rownames(result_df_all) == "sa",])/(dim(result_df_all)[1]/5)
))
test_summ
write.csv(test_summ, "tables/test_summary_dep.csv")
mod_names <- rownames(result_df_all)
result_df_all <- as.data.frame(result_df_all, row.names = NA)
result_df_all$model <- mod_names
#### #### #### #### #### ord model
# Create a list of simulation numbers
sim_nums <- 1:100
results_files <- dir("~/corhmm-dredge/structure_results/ord_model/", full.names = TRUE)
results <- lapply(results_files, readRDS)
tmp_dat <- data.frame(sp = NA,
Self = factor(c("outx", "fac", "self"), c("outx", "fac", "self")))
index_mat <- getStateMat4Dat(tmp_dat)$rate.mat
index_mat <- dropStateMatPars(index_mat, c(5,2,4))
results <- lapply(results, function(x)
t(data.frame(
l0 = model_test_ord(
x$corhmm_fits$l0[[which.min(getModelTable(x$corhmm_fits$l0)$dAIC)]],
index_mat),
l1 = model_test_ord(
x$corhmm_fits$l1[[which.min(getModelTable(x$corhmm_fits$l1)$dAIC)]],
index_mat),
l2 = model_test_ord(
x$corhmm_fits$l2[[which.min(getModelTable(x$corhmm_fits$l2)$dAIC)]],
index_mat),
er = model_test_ord(
x$corhmm_fits$er[[which.min(getModelTable(x$corhmm_fits$er)$dAIC)]],
index_mat),
sa = model_test_ord(
x$corhmm_fits$sa[[which.min(getModelTable(x$corhmm_fits$sa)$dAIC)]],
index_mat)
)))
# Combine results if needed
result_df_all <- do.call(rbind, results)
# how consistent are the results with the hypothesis?
test_summ <- (data.frame(
l0=colSums(result_df_all[rownames(result_df_all) == "l0",])/(dim(result_df_all)[1]/5),
l1=colSums(result_df_all[rownames(result_df_all) == "l1",])/(dim(result_df_all)[1]/5),
l2=colSums(result_df_all[rownames(result_df_all) == "l2",])/(dim(result_df_all)[1]/5),
er=colSums(result_df_all[rownames(result_df_all) == "er",])/(dim(result_df_all)[1]/5),
sa=colSums(result_df_all[rownames(result_df_all) == "sa",])/(dim(result_df_all)[1]/5)
))
test_summ
write.csv(test_summ, "tables/test_summary_ord.csv")
#### #### #### #### #### hmm model
sim_nums <- 1:100
results_files <- dir("~/corhmm-dredge/structure_results/hmm_model/", full.names = TRUE)
results <- lapply(results_files, readRDS)
tmp_dat <- data.frame(sp = NA, expand.grid(list(c("muted", "vivid"), c("0", "1"))))
index_mat <- getStateMat4Dat(tmp_dat)$rate.mat
index_mat <- equateStateMatPars(index_mat, list(c(2,4,5,7)))
results <- lapply(results, function(x)
t(data.frame(
l0 = model_test_hmm(
x$corhmm_fits$l0[[which.min(getModelTable(x$corhmm_fits$l0)$dAIC)]],
index_mat),
l1 = model_test_hmm(
x$corhmm_fits$l1[[which.min(getModelTable(x$corhmm_fits$l1)$dAIC)]],
index_mat),
l2 = model_test_hmm(
x$corhmm_fits$l2[[which.min(getModelTable(x$corhmm_fits$l2)$dAIC)]],
index_mat),
er = model_test_hmm(
x$corhmm_fits$er[[which.min(getModelTable(x$corhmm_fits$er)$dAIC)]],
index_mat),
sa = model_test_hmm(
x$corhmm_fits$sa[[which.min(getModelTable(x$corhmm_fits$sa)$dAIC)]],
index_mat)
)))
# Combine results if needed
result_df_all <- do.call(rbind, results)
# how consistent are the results with the hypothesis?
test_summ <- (data.frame(
l0=colSums(result_df_all[rownames(result_df_all) == "l0",], T)/(dim(result_df_all)[1]/5),
l1=colSums(result_df_all[rownames(result_df_all) == "l1",], T)/(dim(result_df_all)[1]/5),
l2=colSums(result_df_all[rownames(result_df_all) == "l2",], T)/(dim(result_df_all)[1]/5),
er=colSums(result_df_all[rownames(result_df_all) == "er",], T)/(dim(result_df_all)[1]/5),
sa=colSums(result_df_all[rownames(result_df_all) == "sa",], T)/(dim(result_df_all)[1]/5)
))
test_summ
write.csv(test_summ, "tables/test_summary_hmm.csv")
round(test_summ, 3) * 100
