# Plot 2: Rate vs. Time
rate_plot <- ggplot(results, aes(x = time)) +
geom_line(aes(y = geodesic_rate, color = "Geodesic"), size = 1) +
geom_line(aes(y = euclidean_rate, color = "Euclidean"), size = 1) +
scale_color_manual(values = c("Geodesic" = "blue", "Euclidean" = "red")) +
labs(x = "Time",
y = "Rate (Distance/Time)",
title = "Rate vs. Time",
subtitle = "Comparing measured rates of movement",
color = "Distance Type") +
theme_minimal()
# Plot 3: Ratio vs. Geodesic Distance
ratio_distance_plot <- ggplot(results, aes(x = geodesic_distance, y = ratio)) +
geom_line(color = "purple", size = 1) +
# Remove points for smoother visualization
# geom_point() +
labs(x = "Geodesic Distance",
y = "Ratio (Euclidean Rate / Geodesic Rate)",
title = "Ratio of Euclidean to Geodesic Rate vs. Distance") +
theme_minimal()
# Plot 4: Percent Difference vs. Angular Separation
percent_diff_plot <- ggplot(results, aes(x = angle_degrees, y = percent_diff)) +
geom_line(color = "green", size = 1) +
# Remove points for smoother visualization
# geom_point() +
labs(x = "Angular Separation (degrees)",
y = "Percent Difference (%)",
title = "Percent Difference Between Geodesic and Euclidean Rates",
subtitle = "Positive values mean Euclidean underestimates the true rate") +
theme_minimal()
# Plot 5: Rate vs. Distance
rate_distance_plot <- ggplot(results, aes(x = geodesic_distance)) +
geom_line(aes(y = geodesic_rate, color = "Geodesic"), size = 1) +
geom_line(aes(y = euclidean_rate, color = "Euclidean"), size = 1) +
scale_color_manual(values = c("Geodesic" = "blue", "Euclidean" = "red")) +
labs(x = "Geodesic Distance",
y = "Rate (Distance/Time)",
title = "Rate vs. Distance",
subtitle = "How measured rates change with distance traveled",
color = "Distance Type") +
theme_minimal()
# Arrange plots
grid.arrange(distance_plot, rate_plot, ratio_distance_plot, percent_diff_plot, rate_distance_plot,
ncol = 2)
# Additional analysis: Calculate the cosine of the angular distance and compare to ratio
results$cos_angle <- cos(results$geodesic_distance)
# Plot Ratio vs. Cosine of Angle
cos_ratio_plot <- ggplot(results, aes(x = cos_angle, y = ratio)) +
geom_line(color = "orange", size = 1) +
# Remove points for smoother visualization
# geom_point() +
labs(x = "Cosine of Angular Separation",
y = "Ratio (Euclidean Rate / Geodesic Rate)",
title = "Ratio vs. Cosine of Angular Separation",
subtitle = "Testing mathematical relationship") +
theme_minimal()
print(cos_ratio_plot)
# Mathematical relationship analysis
cat("\nAnalyzing mathematical relationship between Euclidean/Geodesic ratio and angular distance:\n")
cat("For small angles, the ratio should approach 1 (with sin(θ) ≈ θ for small θ)\n")
cat("For larger angles, the theoretical ratio is sin(θ)/θ where θ is the angular distance in radians\n\n")
# Calculate theoretical ratios
# Standard sin(θ)/θ formula
results$sin_theta_ratio <- sin(results$geodesic_distance) / results$geodesic_distance
# The more accurate 2*sin(θ/2)/θ formula (chord/arc ratio for a circle)
results$chord_arc_ratio <- 2 * sin(results$geodesic_distance/2) / results$geodesic_distance
# Set the theoretical ratio to the chord/arc ratio which is the mathematically correct one
results$theoretical_ratio <- results$chord_arc_ratio
# Compare actual vs theoretical ratio
theory_comparison <- ggplot(results, aes(x = geodesic_distance)) +
geom_line(aes(y = ratio, color = "Actual"), size = 1) +
geom_line(aes(y = chord_arc_ratio, color = "Chord/Arc (2*sin(θ/2)/θ)"), size = 1, linetype = "dashed") +
geom_line(aes(y = sin_theta_ratio, color = "sin(θ)/θ"), size = 1, linetype = "dotted") +
# Add a secondary x-axis showing degrees
scale_x_continuous(sec.axis = sec_axis(~ . * 180/pi, name = "Angular Distance (degrees)")) +
scale_color_manual(values = c("Actual" = "purple",
"Chord/Arc (2*sin(θ/2)/θ)" = "black",
"sin(θ)/θ" = "orange")) +
labs(x = "Angular Distance (radians)",
y = "Ratio",
title = "Actual vs. Theoretical Ratio",
subtitle = "Comparing with mathematical relationships",
color = "Ratio Type") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank())
print(theory_comparison)
# Create a zoomed-in plot for small angles
small_angle_plot <- ggplot(subset(results, angle_degrees < 15),
aes(x = angle_degrees)) +
geom_line(aes(y = ratio, color = "Actual"), size = 1.2) +
geom_line(aes(y = chord_arc_ratio, color = "Chord/Arc (2*sin(θ/2)/θ)"),
size = 1, linetype = "dashed") +
geom_line(aes(y = sin_theta_ratio, color = "sin(θ)/θ"),
size = 1, linetype = "dotted") +
scale_color_manual(values = c("Actual" = "purple",
"Chord/Arc (2*sin(θ/2)/θ)" = "black",
"sin(θ)/θ" = "orange")) +
labs(x = "Angular Distance (degrees)",
y = "Ratio",
title = "Ratio for Small Angular Distances",
subtitle = "Zoomed view of near-zero behavior",
color = "Ratio Type") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank())
print(small_angle_plot)
# Print the data frame for small angles to examine the limit behavior
cat("\nRatio values for small angles:\n")
small_angles <- subset(results, angle_degrees < 10)
print(small_angles[, c("angle_degrees", "ratio", "theoretical_ratio")])
library(corHMM)
?corHMM
data(primates)
phy <- multi2di(primates[[1]])
data <- primates[[2]]
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 1)
debug(corHMM)
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 1, nstarts = 5)
restart.set
out
out
debug(random.restart)
restart.set <- lapply(1:nstarts, random.restart)
restart.set
out
out$message
out$status
?nloptr
tmp
load("~/Downloads/bad2.rda")
hed(data)
head(data)
data$Reg
factor(data$Reg)
factor(data$Reg)[71]
library(OUwie)
?hOUwie
hOUwie(phy, data, 1, "ER", "OUM")
phy
debug(hOUwie)
hOUwie(phy, data, 1, "ER", "OUM")
hOUwie.dat
hOUwie.dat[71,]
hOUwie.dat$data.cor[71,]
hOUwie.dat$data.ou[71,]
hOUwie.dat$PossibleTraits
hOUwie.dat$ObservedTraits
edge_liks_list
edge_liks_list[[71]]
hOUwie.dat$data.cor
time_slice
debug(getEdgeLiks)
getEdgeLiks(phy, hOUwie.dat$data.cor,
nStates, rate.cat, time_slice)
edge_liks_list
n_slice
(phy$edge.length[edge_i]%/%time_slice) +
2
time_slice
phy$edge.length
time_slice
n_slice
edge_i
edge_liks_list[[edge_i]]
phy$edge[edge_i, 2]
nTip
phy$tip.label[phy$edge[edge_i, 2]]
data[data[, 1] == species_i, 2]
state_i_index
as.numeric(unlist(strsplit(as.character(state_i),
"&")))
tmp[state_i_index]
as.numeric(unlist(strsplit(as.character(state_i),
"&")))
rep(tmp, rate.cat)
rate.cat
edge_i
n_slice
edge_i = 71
n_slice
(phy$edge.length[edge_i]%/%time_slice) +
2
edge_liks_list
edge_liks_list[[edge_i]]
tmp
phy$tip.label[phy$edge[edge_i, 2]]
data[data[, 1] == species_i, 2]
data[, 1]
data[, 1] == species_i
any(data[, 1] == species_i)
species_i
species_i %in% phy$tip.label
species_i %in% data[, 1]
dim(data)
phy
data[data[, 1] == species_i, 2]
state_i <- data[data[, 1] == species_i, 2]
state_i
as.numeric(unlist(strsplit(as.character(state_i),
"&")))
state_i_index <- as.numeric(unlist(strsplit(as.character(state_i),
"&")))
tmp[state_i_index]
tmp
edge_liks_list[[edge_i]][1, ]
species_i
data[,1]
species_i %in% data[,1]
!species_i %in% data[,1]
devtools::load_all("~/OUwie/")
load("~/Downloads/bad2.rda")
head(data)
factor(data$Reg)[]
debug(hOUwie)
hOUwie(phy, data, 1, "ER", "OUM")
edge_liks_list
edge_liks_list[[71]]
devtools::load_all("OUwie/")
BM1_CID <- hOUwie(tree, trait, rate.cat=2, discrete_model="ARD", continuous_model="BM1", diagn_msg = TRUE, nSim=1)
load("~/Downloads/test_tree.RData")
dat <- read.csv("~/Downloads/test.csv")
head(dat)
BM1_CID <- hOUwie(tree, trait, rate.cat=2, discrete_model="ARD", continuous_model="BM1", diagn_msg = TRUE, nSim=1)
trait <- read.csv("~/Downloads/test.csv")
BM1_CID <- hOUwie(tree, trait, rate.cat=2, discrete_model="ARD", continuous_model="BM1", diagn_msg = TRUE, nSim=1)
BM1_CID
OU1_CID <- hOUwie(tree, trait, rate.cat=2, discrete_model="ARD", continuous_model="OU1", diagn_msg=TRUE, nSim=1)
CID_model_set <- list(BM1_CID=BM1_CID, OU1_CID=OU1_CID)
#getModelTable(CID_model_set, type="AIC")
getModelAvgParams(CID_model_set)
BM1_CID <- hOUwie(tree, trait, rate.cat=2, discrete_model="ARD", continuous_model="BM1", diagn_msg = TRUE, nSim=2)
OU1_CID <- hOUwie(tree, trait, rate.cat=2, discrete_model="ARD", continuous_model="OU1", diagn_msg=TRUE, nSim=2)
CID_model_set <- list(BM1_CID=BM1_CID, OU1_CID=OU1_CID)
#getModelTable(CID_model_set, type="AIC")
getModelAvgParams(CID_model_set)
round(getModelAvgParams(CID_model_set)
, 3)
round(getModelAvgParams(CID_model_set), 3)
library(SegmentR)
?grounded_segmentation_cli
search_conda_locations()
SegmentR:::search_conda_locations()
SegmentR:::search_conda_locations
setup_conda_environment
Sys.which("conda")
conda_path <- search_conda_locations()
.Platform$OS.type
sprintf('%s env list | findstr "%s"', conda_path, conda_env)
conda_path <- SegmentR:::search_conda_locations()
conda_path <- "blah/"
conda_env <- "bleh"
sprintf('%s env list | grep -q "%s"', conda_path, conda_env)
sprintf('%s env list | findstr "%s"', conda_path, conda_env)
devtools::install_github("jboyko/SegmentR")
SegmentR:::search_conda_locations()
conda_path <- SegmentR:::search_conda_locations()
conda_env = "segmentr-env"
conda_path
sprintf('%s env list | grep -q "%s"', conda_path, conda_env)
cmd_check_env
sprintf('%s env list | findstr "%s"', conda_path, conda_env)
cmd_check_env <- sprintf('%s env list | findstr "%s"', conda_path, conda_env)
.Platform$OS.type
.Platform
sin
sin(``)
sin(1)
sin(0)
sin(3.14)
sin(pi)
sin(pi/2)
plot(x = 1:100, y = sin(1:100))
plot(x = 1:100, y = sin(1:100), type = "l")
plot(x = 1:100/10, y = sin(1:100/10), type = "l")
plot(x = 0:100/10, y = sin(0:100/10), type = "l")
library(corHMM)
?ancRECON
data(primates)
phy <- multi2di(primates[[1]])
data <- primates[[2]]
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 1)
# # one way to get the parameters from your corHMM object in the correct order
p <- sapply(1:max(MK_3state$index.mat, na.rm = TRUE), function(x)
na.omit(c(MK_3state$solution))[na.omit(c(MK_3state$index.mat) == x)][1])
# using custom params
states_1 <- ancRECON(phy = phy, data = MK_3state$data, p = p, method = "marginal",
rate.cat <- MK_3state$rate.cat, ntraits = NULL, rate.mat = MK_3state$index.mat,
root.p = MK_3state$root.p)
# using custom params
states_1 <- ancRECON(phy = phy, data = MK_3state$data, p = p, method = "marginal",
rate.cat <- MK_3state$rate.cat, ntraits = NULL, rate.mat = MK_3state$index.mat,
root.p = MK_3state$root.p)
ancRECON
ancRECON(phy = phy, data = MK_3state$data, p = p, method = "marginal",
rate.cat <- MK_3state$rate.cat, ntraits = NULL, rate.mat = MK_3state$index.mat,
root.p = MK_3state$root.p)
# library(corHMM)
setwd("~/corHMM/")
devtools::load_all()
setwd("~/corhmm-dredge/")
data(primates)
phy <- multi2di(primates[[1]])
phy$edge.length <- phy$edge.length + 1e-7
data <- primates[[2]]
plot(phy, show.tip.label = FALSE, direction = "downwards")
tiplabels(pie = dredge_model$tip.states[,1:4], piecol = piecolors, cex = 0.35)
legend("topright", legend = colnames(dredge_model$states)[1:4],
pch=21, pt.bg = piecolors[1:4], cex = 1, bty="n", title = "")
dredge_fitsSA <- corHMMDredgeSA(phy = phy, data = data, max.rate.cat = 2,
pen.type = "l1", root.p = "maddfitz", lambda = 1, nstarts = 5, n.cores = 5,
verbose = TRUE, max.iterations = 500, return.all = TRUE, initial.temp = 4)
# dredge_fitsSA <- corHMMDredgeSA(phy = phy, data = data, max.rate.cat = 2,
#   pen.type = "l1", root.p = "maddfitz", lambda = 1, nstarts = 5, n.cores = 5,
#   verbose = TRUE, max.iterations = 500, return.all = TRUE, initial.temp = 4)
# saveRDS(dredge_fitsSA, file = "empirical_results/empirical.RDS")
dredge_fitsSA <- readRDS("empirical_results/empirical.RDS")
# library(corHMM)
setwd("~/corHMM/")
devtools::load_all()
setwd("~/corhmm-dredge/")
data(primates)
phy <- multi2di(primates[[1]])
phy$edge.length <- phy$edge.length + 1e-7
data <- primates[[2]]
# dredge_fitsSA <- corHMMDredgeSA(phy = phy, data = data, max.rate.cat = 2,
#   pen.type = "l1", root.p = "maddfitz", lambda = 1, nstarts = 5, n.cores = 5,
#   verbose = TRUE, max.iterations = 500, return.all = TRUE, initial.temp = 4)
# saveRDS(dredge_fitsSA, file = "empirical_results/empirical.RDS")
dredge_fitsSA <- readRDS("empirical_results/empirical.RDS")
# library(corHMM)
setwd("~/corHMM/")
devtools::load_all()
setwd("~/corhmm-dredge/")
data(primates)
phy <- multi2di(primates[[1]])
phy$edge.length <- phy$edge.length + 1e-7
data <- primates[[2]]
# dredge_fitsSA <- corHMMDredgeSA(phy = phy, data = data, max.rate.cat = 2,
#   pen.type = "l1", root.p = "maddfitz", lambda = 1, nstarts = 5, n.cores = 5,
#   verbose = TRUE, max.iterations = 500, return.all = TRUE, initial.temp = 4)
# saveRDS(dredge_fitsSA, file = "empirical_results/empirical.RDS")
dredge_fitsSA <- readRDS("empirical_results/empirical.RDS")
setwd("~/corhmm-dredge/")
data(primates)
phy <- multi2di(primates[[1]])
phy$edge.length <- phy$edge.length + 1e-7
data <- primates[[2]]
# dredge_fitsSA <- corHMMDredgeSA(phy = phy, data = data, max.rate.cat = 2,
#   pen.type = "l1", root.p = "maddfitz", lambda = 1, nstarts = 5, n.cores = 5,
#   verbose = TRUE, max.iterations = 500, return.all = TRUE, initial.temp = 4)
# saveRDS(dredge_fitsSA, file = "empirical_results/empirical.RDS")
dredge_fitsSA <- readRDS("empirical_results/empirical.RDS")
# dredge_fitsSA <- corHMMDredgeSA(phy = phy, data = data, max.rate.cat = 2,
#   pen.type = "l1", root.p = "maddfitz", lambda = 1, nstarts = 5, n.cores = 5,
#   verbose = TRUE, max.iterations = 500, return.all = TRUE, initial.temp = 4)
# saveRDS(dredge_fitsSA, file = "empirical_results/empirical.RDS")
dredge_fitsSA <- readRDS("empirical_results/empirical.RDS")
new_init <- dredge_fitsSA$all_models[[14]]$index.mat
new_init[7,3] <- NA
new_init
# dredge_fitsSA2 <- corHMMDredgeSA(phy = phy, data = data, init.rate.cat = 2, max.rate.cat = 2,
#   pen.type = "l1", root.p = "maddfitz", lambda = 1, nstarts = 5, n.cores = 5,
#   verbose = TRUE, max.iterations = 500, return.all = TRUE, index_mat = new_init)
# saveRDS(dredge_fitsSA2, file = "empirical_results/empirical2.RDS")
dredge_fitsSA2 <- readRDS("empirical_results/empirical2.RDS")
getModelTable(dredge_fitsSA2$all_models)
dredge_fitsSA2$all_models[[8]]
# model_table <- getModelTable(dredge_fits)
getModelTable(dredge_fitsSA$all_models)
dredge_fitsSA$all_models[[14]]
source("code/plot_SA_info.R")
model_table <- getModelTable(dredge_fitsSA$all_models)
dredge_model <- dredge_fitsSA2$all_models[[8]]
# k_fold_res <- kFoldCrossValidation(dredge_model, k = 5, lambdas = c(0,0.25,0.5,0.75,1))
# saveRDS(k_fold_res, file = "empirical_results/empirical_kfold.RDS")
k_fold_res <- readRDS("empirical_results/empirical_kfold.RDS")
cv_table <- getCVTable(k_fold_res)
cv_table
# profile_results_dredge <- get_batch_profile_lik(dredge_model, dredge = TRUE,
#   range_factor = 100, n_points = 200, verbose = TRUE, ncores = 8)
# saveRDS(profile_results_dredge, file = "empirical_results/empirical_profile.RDS")
profile_results_dredge <- readRDS("empirical_results/empirical_profile.RDS")
plot_batch_profile_lik(profile_results_dredge)
profile_results_dredge[[1]]$profile_table
profile_results_dredge[[2]]$profile_table
get_profile_confidence_intervals(profile_results_dredge)
# k_fold_res <- kFoldCrossValidation(dredge_model, k = 5, lambdas = c(0,0.25,0.5,0.75,1))
# saveRDS(k_fold_res, file = "empirical_results/empirical_kfold.RDS")
dredge_model$states[1,]
plot(phy, show.tip.label = FALSE, direction = "downwards")
tiplabels(pie = anc_recon$lik.tip.states, piecol = piecolors, cex = 0.35)
dev.off()
RColorBrewer::display.brewer.all()
piecolors <- RColorBrewer::brewer.pal(8, "Paired")[c(2,8,6,4,1,7,5,3)]
anc_recon <- ancRECON(phy = dredge_model$phy,
data = dredge_model$data,
p = MatrixToPars(dredge_model),
method = "marginal",
rate.cat = 2,
rate.mat = dredge_model$index.mat,
get.tip.states = TRUE, collapse = FALSE)
phy <- ladderize(dredge_model$phy)
plot_batch_profile_lik(profile_results_dredge)
profile_results_dredge[[1]]$profile_table
profile_results_dredge[[2]]$profile_table
get_profile_confidence_intervals(profile_results_dredge)
dev.off()
RColorBrewer::display.brewer.all()
piecolors <- RColorBrewer::brewer.pal(8, "Paired")[c(2,8,6,4,1,7,5,3)]
anc_recon <- ancRECON(phy = dredge_model$phy,
data = dredge_model$data,
p = MatrixToPars(dredge_model),
method = "marginal",
rate.cat = 2,
rate.mat = dredge_model$index.mat,
get.tip.states = TRUE, collapse = FALSE)
anc_recon
plot(phy, show.tip.label = FALSE, direction = "downwards")
tiplabels(pie = anc_recon$lik.tip.states, piecol = piecolors, cex = 0.35)
nodelabels(pie = anc_recon$lik.anc.states, piecol = piecolors, cex = 0.35)
legend("topleft", legend = colnames(dredge_model$states),
pch=21, pt.bg = piecolors, cex = 0.6, bty="n", title = "")
text(x = -1, y = 50, label = "Estrus display | Multimale mating",
cex = 0.6, adj=0)
dredge_model
dredge_model$states[1,]
ancRECON(phy = dredge_model$phy,
data = dredge_model$data,
p = MatrixToPars(dredge_model),
method = "marginal",
rate.cat = 2,
rate.mat = dredge_model$index.mat,
get.tip.states = TRUE, collapse = FALSE)
debug(ancRECON)
ancRECON(phy = dredge_model$phy,
data = dredge_model$data,
p = MatrixToPars(dredge_model),
method = "marginal",
rate.cat = 2,
rate.mat = dredge_model$index.mat,
get.tip.states = TRUE, collapse = FALSE)
corData
anc_recon <- ancRECON(phy = dredge_model$phy,
data = dredge_model$data,
p = MatrixToPars(dredge_model),
method = "marginal",
rate.cat = 2,
rate.mat = dredge_model$index.mat, collapse = FALSE,
get.tip.states = TRUE, collapse = FALSE)
anc_recon <- ancRECON(phy = dredge_model$phy, root.p = "maddfitz",
data = dredge_model$data,
p = MatrixToPars(dredge_model),
method = "marginal",
rate.cat = 2,
rate.mat = dredge_model$index.mat,
get.tip.states = TRUE, collapse = FALSE)
corData
collapse
model.set.final
liks.final
collapse
tip.fog
anc_recon
profile_results_dredge[[1]]$profile_table
profile_results_dredge[[2]]$profile_table
get_profile_confidence_intervals(profile_results_dredge)
tiplabels()
anc_recon <- ancRECON(phy = dredge_model$phy, root.p = "maddfitz",
data = dredge_model$data,
p = MatrixToPars(dredge_model),
method = "marginal",
rate.cat = 2,
rate.mat = dredge_model$index.mat,
get.tip.states = TRUE, collapse = FALSE)
setwd("~/corHMM/")
devtools::load_all()
setwd("~/corhmm-dredge/")
par(mfrow=c(1,2))
plot(phy, show.tip.label = FALSE, direction = "downwards")
tiplabels(pie = anc_recon$lik.tip.states, piecol = piecolors, cex = 0.35)
nodelabels(pie = anc_recon$lik.anc.states, piecol = piecolors, cex = 0.35)
legend("topleft", legend = colnames(dredge_model$states),
pch=21, pt.bg = piecolors, cex = 0.6, bty="n", title = "")
text(x = -1, y = 50, label = "Estrus display | Multimale mating",
cex = 0.6, adj=0)
plot(phy, show.tip.label = TRUE, direction = "downwards")
plot(phy, show.tip.label = TRUE, direction = "downwards", cex = 0.75)
plot(phy, show.tip.label = TRUE, direction = "downwards", cex = 0.5)
plot(phy, show.tip.label = FALSE, direction = "downwards")
tiplabels(pie = anc_recon$lik.tip.states, piecol = piecolors, cex = 0.35)
nodelabels(pie = anc_recon$lik.anc.states, piecol = piecolors, cex = 0.35)
legend("topleft", legend = colnames(dredge_model$states),
pch=21, pt.bg = piecolors, cex = 0.6, bty="n", title = "")
text(x = -1, y = 50, label = "Estrus display | Multimale mating",
cex = 0.6, adj=0)
plot(phy, show.tip.label = TRUE, cex = 0.5)
plot(phy, show.tip.label = FALSE, direction = "downwards")
tiplabels(pie = anc_recon$lik.tip.states, piecol = piecolors, cex = 0.35)
nodelabels(pie = anc_recon$lik.anc.states, piecol = piecolors, cex = 0.35)
legend("topleft", legend = colnames(dredge_model$states),
pch=21, pt.bg = piecolors, cex = 0.6, bty="n", title = "")
text(x = -1, y = 50, label = "Estrus display | Multimale mating",
cex = 0.6, adj=0)
plot(phy, show.tip.label = TRUE, cex = 0.5, direction = "downwards")
phy
phy$tip.label
cv_table
round(cv_table$score_table, 4)
round(cv_table$avg_scores, 4)
getModelTable(dredge_fitsSA2$all_models)
# model_table <- getModelTable(dredge_fits)
getModelTable(dredge_fitsSA$all_models)
getModelTable(dredge_fitsSA2$all_models)
