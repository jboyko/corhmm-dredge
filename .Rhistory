colnames(plot_data) <- c("01_unreg", "10_unreg", "01_reg", "10_reg")
boxplot(plot_data); abline(h = 1)
res_reg <- mclapply(cor_dat, function(x) corHMM:::corHMMDredge(phy, x, 1, pen_type = "distance"), mc.cores = 10)
df_unreg <- do.call(rbind, lapply(res_unreg, function(x) c(x$solution)[c(3,2)]))
df_reg <- do.call(rbind, lapply(res_reg, function(x) c(x$solution)[c(3,2)]))
plot_data <- cbind(df_unreg, df_reg)
colnames(plot_data) <- c("01_unreg", "10_unreg", "01_reg", "10_reg")
boxplot(plot_data); abline(h = 1)
res_reg <- mclapply(cor_dat, function(x) corHMM:::corHMMDredge(phy, x, 1, pen_type = "logl1"), mc.cores = 10)
df_unreg <- do.call(rbind, lapply(res_unreg, function(x) c(x$solution)[c(3,2)]))
df_reg <- do.call(rbind, lapply(res_reg, function(x) c(x$solution)[c(3,2)]))
plot_data <- cbind(df_unreg, df_reg)
colnames(plot_data) <- c("01_unreg", "10_unreg", "01_reg", "10_reg")
boxplot(plot_data); abline(h = 1)
df_unreg - 1
bias_unreg = colMeans(df_unreg - 1)
bias = colMeans(plot_data - 1)
bias
bias = colMeans(plot_data) 1
bias = colMeans(plot_data) - 1
bias
colMeans(plot_data)
apply(plot_data, 2, var)
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - 1)^2)
mse
rmse = sqrt(colMeans((plot_data - 1)^2))
rmse
data.frame(bias, varr, mse, rmse)
t(data.frame(bias, varr, mse, rmse))
log(1)
plot_data <- log(cbind(df_unreg, df_reg))
colnames(plot_data) <- c("01_unreg", "10_unreg", "01_reg", "10_reg")
bias = colMeans(plot_data) - 0
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - 0)^2)
rmse = sqrt(colMeans((plot_data - 1)^2))
t(data.frame(bias, varr, mse, rmse))
rmse = sqrt(colMeans((plot_data - 0)^2))
t(data.frame(bias, varr, mse, rmse))
var(1,1,1,10)
var(c(1,1,1,10))
var(c(1,1,1,1))
library(corHMM)
library(TreeSim)
library(parallel)
nsim = 100
n = 100
numbsim = 1
lambda = 1
mu = 0.5
Q <- matrix(c(-1,1,1,-1), 2, 2, byrow = TRUE)
root.p <- c(1,0)
phy <- sim.bd.taxa(n, numbsim, lambda, mu, frac = 1, complete = FALSE, stochsampling = FALSE)[[1]]
dat <- lapply(1:nsim, function(x) corHMM:::simMarkov(phy, Q, root.p))
cor_dat <- lapply(dat, function(x) data.frame(sp = names(x$TipStates), d = x$TipStates))
res_unreg <- mclapply(cor_dat, function(x) corHMM(phy, x, 1), mc.cores = 10)
res_reg <- mclapply(cor_dat, function(x) corHMM:::corHMMDredge(phy, x, 1, pen_type = "varr"), mc.cores = 10)
df_unreg <- do.call(rbind, lapply(res_unreg, function(x) c(x$solution)[c(3,2)]))
df_reg <- do.call(rbind, lapply(res_reg, function(x) c(x$solution)[c(3,2)]))
plot_data <- log(cbind(df_unreg, df_reg))
colnames(plot_data) <- c("01_unreg", "10_unreg", "01_reg", "10_reg")
bias = colMeans(plot_data) - 0
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - 0)^2)
rmse = sqrt(colMeans((plot_data - 0)^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(plot_data); abline(h = 1)
boxplot(plot_data); abline(h = 0)
bias = colMeans(plot_data) - 1
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - 1)^2)
rmse = sqrt(colMeans((plot_data - 1)^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(plot_data); abline(h = 1)
plot_data <- (cbind(df_unreg, df_reg))
colnames(plot_data) <- c("01_unreg", "10_unreg", "01_reg", "10_reg")
bias = colMeans(plot_data) - 1
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - 1)^2)
rmse = sqrt(colMeans((plot_data - 1)^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(plot_data); abline(h = 1)
res_reg <- mclapply(cor_dat, function(x) corHMM:::corHMMDredge(phy, x, 1, pen_type = "logl1"), mc.cores = 10)
df_unreg <- do.call(rbind, lapply(res_unreg, function(x) c(x$solution)[c(3,2)]))
df_reg <- do.call(rbind, lapply(res_reg, function(x) c(x$solution)[c(3,2)]))
plot_data <- (cbind(df_unreg, df_reg))
colnames(plot_data) <- c("01_unreg", "10_unreg", "01_reg", "10_reg")
bias = colMeans(plot_data) - 1
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - 1)^2)
rmse = sqrt(colMeans((plot_data - 1)^2))
t(data.frame(bias, varr, mse, rmse))
boxplot(plot_data); abline(h = 1)
res_reg <- mclapply(cor_dat, function(x) corHMM:::corHMMDredge(phy, x, 1, pen_type = "varrlog"), mc.cores = 10)
res_reg <- mclapply(cor_dat, function(x) corHMM:::corHMMDredge(phy, x, 1, pen_type = "varrlog"), mc.cores = 10)
# simple binary simulation
setwd("~/corhmm-dredge/")
library(corHMM)
library(parallel)
library(MASS)
library(MCMCpack)
source("code/utils.R")
nSim <- 100
mccores <- 10
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
phy <- trees[[1]]
# which simulation number
simulation <- "01"
overwrite <- FALSE
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
res_reg_name <- paste0("res_reg-", simulation, ".RDS")
res_unreg_name <- paste0("res_unreg-", simulation, ".RDS")
res_bayes_name <- paste0("res_bayes-", simulation, ".RDS")
# creates an index mat appropriate for nchar, nstates, and nhidden
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=1)
###### ###### ###### ###### parameter table generation ###### ###### ###### ######
file_found <- par_table_name %in% dir("parameter_tables/")
if(!file_found | overwrite){
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
write.csv(par_table, file = paste0("parameter_tables/", par_table_name), row.names = FALSE)
}else{
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
}
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
###### ###### ###### ###### data simulation ###### ###### ###### ######
file_found <- full_dat_name %in% dir("data/")
if(!file_found | overwrite){
full_dat <- lapply(rate_mats, function(x) get_sim_data(phy, x, index_mat))
saveRDS(full_dat, file = paste0("data/", full_dat_name))
}else{
full_dat <- readRDS(paste0("data/", full_dat_name))
}
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
###### ###### ###### ###### model fitting ###### ###### ###### ######
file_found <- res_unreg_name %in% dir("res/")
if(!file_found | overwrite){
res_unreg <- mclapply(cor_dat, function(x)
corHMM(phy, x, 1),
mc.cores = mccores)
saveRDS(res_unreg, file = paste0("res/", res_unreg_name))
}else{
res_unreg <- readRDS(paste0("res/", res_unreg_name))
}
file_found <- res_reg_name %in% dir("res/")
mccores
res_reg <- mclapply(cor_dat, function(x)
corHMM:::corHMMDredge(phy, x, 1, pen_type = "log_exp"),
mc.cores = mccores)
res_reg
file_found <- res_bayes_name %in% dir("res/")
if(!file_found | overwrite){
nPar <- max(index_mat$full_rate_mat)
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
saveRDS(res_bayes, file = paste0("res/", res_bayes_name))
}else{
res_bayes <- readRDS(paste0("res/", res_bayes_name))
}
###### ###### ###### ###### summarization ###### ###### ###### ######
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
plot_data <- (cbind(df_unreg, df_reg))
colnames(plot_data) <- c("01_unreg", "10_unreg", "01_reg", "10_reg")
bias = colMeans(plot_data) - 1
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - 1)^2)
rmse = sqrt(colMeans((plot_data - 1)^2))
print(t(data.frame(bias, varr, mse, rmse)))
df_unreg
df_reg
df_bayes
res_bayes <- readRDS(paste0("res/", res_bayes_name))
df_bayes <- do.call(rbind, lapply(res_bayes, function(x) summary(x)$quantiles[,3]))
df_bayes
plot_data <- (cbind(df_unreg, df_reg, df_bayes))
colnames(plot_data) <- paste0(colnames(tmp), rep(c("-unreg", "-reg", "-bayes"), each = 2))
bias = colMeans(plot_data - cbind(par_table, par_table, par_table))
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - cbind(par_table, par_table, par_table))^2)
rmse = sqrt(colMeans((plot_data - cbind(par_table,par_table, par_table))^2))
print(t(data.frame(bias, varr, mse, rmse)))
res_reg
print(t(data.frame(bias, varr, mse, rmse)))
plot_data_long <- pivot_longer(as.data.frame(plot_data), cols = everything())
plot_data_long <- data.frame(do.call(rbind, strsplit(plot_data_long$name, "-")), value = plot_data_long$value)
colnames(plot_data_long) <- c("trans", "type", "value")
library(corHMM)
library(parallel)
library(MASS)
library(dplyr)
library(ggplot2)
library(tidyr)
plot_data_long <- pivot_longer(as.data.frame(plot_data), cols = everything())
plot_data_long <- data.frame(do.call(rbind, strsplit(plot_data_long$name, "-")), value = plot_data_long$value)
colnames(plot_data_long) <- c("trans", "type", "value")
ggplot(data = plot_data_long, aes(x = type, y = log(value))) +
geom_boxplot() +
facet_wrap(~trans)
print(t(data.frame(bias, varr, mse, rmse)))
setwd("~/corhmm-dredge/")
library(corHMM)
library(parallel)
library(MASS)
library(dplyr)
library(ggplot2)
library(tidyr)
source("code/utils.R")
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
phy <- trees[[1]]
nSim = 100
############### Simulation scenario 1 ####################
# which simulation number
simulation <- "01"
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
res_reg_name <- paste0("res_reg-", simulation, ".RDS")
res_unreg_name <- paste0("res_unreg-", simulation, ".RDS")
res_bayes_name <- paste0("res_bayes-", simulation, ".RDS")
# load everything
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=1)
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
res_unreg <- readRDS(paste0("res/", res_unreg_name))
res_reg <- readRDS(paste0("res/", res_reg_name))
res_bayes <- readRDS(paste0("res/", res_bayes_name))
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
df_bayes <- do.call(rbind, lapply(res_bayes, function(x) summary(x)$quantiles[,3]))
plot_data <- (cbind(df_unreg, df_reg, df_bayes))
colnames(plot_data) <- paste0(colnames(tmp), rep(c("-unreg", "-reg", "-bayes"), each = 2))
bias = colMeans(plot_data - cbind(par_table, par_table, par_table))
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - cbind(par_table, par_table, par_table))^2)
rmse = sqrt(colMeans((plot_data - cbind(par_table,par_table, par_table))^2))
print(t(data.frame(bias, varr, mse, rmse)))
plot_data_long <- pivot_longer(as.data.frame(plot_data), cols = everything())
plot_data_long <- data.frame(do.call(rbind, strsplit(plot_data_long$name, "-")), value = plot_data_long$value)
colnames(plot_data_long) <- c("trans", "type", "value")
ggplot(data = plot_data_long, aes(x = type, y = log(value))) +
geom_boxplot() +
facet_wrap(~trans)
############### Simulation scenario 2 ####################
# which simulation number
simulation <- "02"
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
res_reg_name <- paste0("res_reg-", simulation, ".RDS")
res_unreg_name <- paste0("res_unreg-", simulation, ".RDS")
res_bayes_name <- paste0("res_bayes-", simulation, ".RDS")
# load everything
index_mat <- get_index_mat(nChar=2, nStates=2, nRateClass=1)
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
res_unreg <- readRDS(paste0("res/", res_unreg_name))
res_reg <- readRDS(paste0("res/", res_reg_name))
res_bayes <- readRDS(paste0("res/", res_bayes_name))
df_unreg <- do.call(rbind, lapply(res_unreg, get_solution_from_res))
df_reg <- do.call(rbind, lapply(res_reg, get_solution_from_res))
df_bayes <- do.call(rbind, lapply(res_bayes, function(x) summary(x)$quantiles[,3]))
df_bayes
res_bayes
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
# simple two character simulation
setwd("~/corhmm-dredge/")
library(corHMM)
library(parallel)
library(MASS)
library(MCMCpack)
source("code/utils.R")
nSim <- 100
mccores <- 1
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
phy <- trees[[1]]
# which simulation number
simulation <- "02"
overwrite <- FALSE
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
res_reg_name <- paste0("res_reg-", simulation, ".RDS")
res_unreg_name <- paste0("res_unreg-", simulation, ".RDS")
res_bayes_name <- paste0("res_bayes-", simulation, ".RDS")
# creates an index mat appropriate for nchar, nstates, and nhidden
index_mat <- get_index_mat(nChar=2, nStates=2, nRateClass=1)
###### ###### ###### ###### parameter table generation ###### ###### ###### ######
file_found <- par_table_name %in% dir("parameter_tables/")
if(!file_found | overwrite){
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
write.csv(par_table, file = paste0("parameter_tables/", par_table_name), row.names = FALSE)
}else{
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
}
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
###### ###### ###### ###### data simulation ###### ###### ###### ######
file_found <- full_dat_name %in% dir("data/")
if(!file_found | overwrite){
full_dat <- lapply(rate_mats, function(x) get_sim_data(phy, x, index_mat))
saveRDS(full_dat, file = paste0("data/", full_dat_name))
}else{
full_dat <- readRDS(paste0("data/", full_dat_name))
}
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
###### ###### ###### ###### model fitting ###### ###### ###### ######
file_found <- res_unreg_name %in% dir("res/")
if(!file_found | overwrite){
res_unreg <- mclapply(cor_dat, function(x)
corHMM(phy, x, 1),
mc.cores = mccores)
saveRDS(res_unreg, file = paste0("res/", res_unreg_name))
}else{
res_unreg <- readRDS(paste0("res/", res_unreg_name))
}
file_found <- res_reg_name %in% dir("res/")
if(!file_found | overwrite){
res_reg <- mclapply(cor_dat, function(x)
corHMM:::corHMMDredge(phy, x, 1, pen_type = "logl1"),
mc.cores = mccores)
saveRDS(res_reg, file = paste0("res/", res_reg_name))
}else{
res_reg <- readRDS(paste0("res/", res_reg_name))
}
file_found <- res_bayes_name %in% dir("res/")
if(!file_found | overwrite){
nPar <- max(index_mat$full_rate_mat)
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores, mc.silent = FALSE)
saveRDS(res_bayes, file = paste0("res/", res_bayes_name))
}else{
res_bayes <- readRDS(paste0("res/", res_bayes_name))
}
res_bayes
file_found
file_found
mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores, mc.silent = FALSE)
source("~/corhmm-dredge/code/utils.R")
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores, mc.silent = FALSE)
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=1000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores, mc.silent = FALSE)
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 2, logfun=TRUE)
log_posterior
nPar
cor_dat[[1]]
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
1e-8
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
optim.lower = rep(1e-8, nPar), optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 2, logfun=TRUE)
rep(1e-8, nPar)
debug(log_posterior)
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
optim.lower = rep(1e-8, nPar), optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 2, logfun=TRUE)
lp_like
rate.cat
source("~/corhmm-dredge/code/utils.R")
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
optim.lower = rep(1e-8, nPar), optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
source("~/corhmm-dredge/code/utils.R")
tmp <- MCMCmetrop1R(log_posterior, theta.init=log(rep(0.5, nPar)), force.samp=TRUE,
optim.lower = log(rep(1e-8, nPar)), optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
tmp <- MCMCmetrop1R(log_posterior, theta.init=log(rep(0.5, nPar)), force.samp=TRUE,
optim.lower = log(rep(1e-8, nPar)), optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
source("~/corhmm-dredge/code/utils.R")
tmp <- MCMCmetrop1R(log_posterior, theta.init=log(rep(0.5, nPar)), force.samp=TRUE,
optim.lower = log(rep(1e-8, nPar)), optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
source("~/corhmm-dredge/code/utils.R")
tmp <- MCMCmetrop1R(log_posterior, theta.init=log(rep(0.5, nPar)), force.samp=TRUE,
optim.lower = log(rep(1e-8, nPar)), optim.method = "L-BFGS-B",
mcmc=1000, burnin=10, thin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
tmp <- MCMCmetrop1R(log_posterior, theta.init=log(rep(0.5, nPar)), force.samp=TRUE,
optim.lower = log(rep(1e-8, nPar)), optim.method = "L-BFGS-B",
mcmc=1000, burnin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=FALSE)
tmp <- MCMCmetrop1R(log_posterior, theta.init=log(rep(0.5, nPar)), force.samp=TRUE,
optim.lower = log(rep(1e-8, nPar)), optim.method = "L-BFGS-B",
mcmc=1000, burnin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
tmp <- MCMCmetrop1R(log_posterior, theta.init=log(rep(0.5, nPar)), force.samp=TRUE,
optim.lower = log(rep(1e-8, nPar)),
mcmc=1000, burnin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
tmp <- MCMCmetrop1R(log_posterior, theta.init=log(rep(0.5, nPar)), force.samp=TRUE,
mcmc=1000, burnin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
summary(tmp)$quantiles[,3]
exp(summary(tmp)$quantiles[,3])
exp(summary(tmp)$quantiles)
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
mcmc=1000, burnin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
(summary(tmp)$quantiles)
source("~/corhmm-dredge/code/utils.R")
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
mcmc=1000, burnin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
1e-7
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
optim.lower=1e-7,
mcmc=1000, burnin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
optim.lower=1e-7,
mcmc=1000, burnin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
optim.lower=1e-7, optim.method = "Brent",
mcmc=1000, burnin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
optim.lower=rep(1e-7, nPar), optim.method = "L-BFGS-B",
mcmc=1000, burnin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
optim.lower=rep(1e-5, nPar), optim.method = "L-BFGS-B",
mcmc=1000, burnin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
optim.lower=rep(0, nPar), optim.method = "L-BFGS-B",
mcmc=1000, burnin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
source("~/corhmm-dredge/code/utils.R")
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
optim.lower=rep(0, nPar), optim.method = "L-BFGS-B",
mcmc=1000, burnin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
-Inf < 0
-Inf < -1e10
source("~/corhmm-dredge/code/utils.R")
-Inf + -1e-6
source("~/corhmm-dredge/code/utils.R")
tmp <- MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), force.samp=TRUE,
optim.lower=rep(0, nPar), optim.method = "L-BFGS-B",
mcmc=1000, burnin=10, verbose=TRUE,
tree=phy, data=cor_dat[[1]], rate.cat = 1, logfun=TRUE)
(summary(tmp)$quantiles)
detectCores()
detectCores()>100
