dexp(c(q1, q2), 1, log=TRUE)
sum(dexp(c(q1, q2), 1, log=TRUE))
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
plot_data
library(dplyr)
library(tidyr)
pivot_longer(plot_data)
plot_data
class(plot_data)
pivot_longer(plot_data, cols = everything())
plot_data
pivot_longer(as.data.frame(plot_data), cols = everything())
plot_data_long <- pivot_longer(as.data.frame(plot_data), cols = everything())
strsplit(plot_data_long, "_")
plot_data_long
strsplit(plot_data_long$name, "_")
do.call(rbind, strsplit(plot_data_long$name, "_"))
cbind(do.call(rbind, strsplit(plot_data_long$name, "_")), plot_data_long$value)
data.frame(do.call(rbind, strsplit(plot_data_long$name, "_")), plot_data_long$value)
data.frame(do.call(rbind, strsplit(plot_data_long$name, "_")), value = plot_data_long$value)
plot_data_long <- data.frame(do.call(rbind, strsplit(plot_data_long$name, "_")), value = plot_data_long$value)
plot_data
plot_data_long
colnames(plot_data_long) <- c("trans", "type", "value")
plot_data_long
# simple two character simulation
setwd("~/corhmm-dredge/")
library(corHMM)
library(parallel)
library(MASS)
library(MCMCpack)
source("code/utils.R")
nSim <- 100
mccores <- 1
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
phy <- trees[[1]]
# which simulation number
simulation <- "02"
overwrite <- FALSE
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
res_reg_name <- paste0("res_reg-", simulation, ".RDS")
res_unreg_name <- paste0("res_unreg-", simulation, ".RDS")
res_bayes_name <- paste0("res_bayes-", simulation, ".RDS")
# creates an index mat appropriate for nchar, nstates, and nhidden
index_mat <- get_index_mat(nChar=2, nStates=2, nRateClass=1)
###### ###### ###### ###### parameter table generation ###### ###### ###### ######
file_found <- par_table_name %in% dir("parameter_tables/")
if(!file_found | overwrite){
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
write.csv(par_table, file = paste0("parameter_tables/", par_table_name), row.names = FALSE)
}else{
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
}
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
###### ###### ###### ###### data simulation ###### ###### ###### ######
file_found <- full_dat_name %in% dir("data/")
if(!file_found | overwrite){
full_dat <- lapply(rate_mats, function(x) get_sim_data(phy, x, index_mat))
saveRDS(full_dat, file = paste0("data/", full_dat_name))
}else{
full_dat <- readRDS(paste0("data/", full_dat_name))
}
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
###### ###### ###### ###### model fitting ###### ###### ###### ######
file_found <- res_unreg_name %in% dir("res/")
if(!file_found | overwrite){
res_unreg <- mclapply(cor_dat, function(x)
corHMM(phy, x, 1),
mc.cores = mccores)
saveRDS(res_unreg, file = paste0("res/", res_unreg_name))
}else{
res_unreg <- readRDS(paste0("res/", res_unreg_name))
}
file_found <- res_reg_name %in% dir("res/")
if(!file_found | overwrite){
res_reg <- mclapply(cor_dat, function(x)
corHMM:::corHMMDredge(phy, x, 1, pen_type = "logl1"),
mc.cores = mccores)
saveRDS(res_reg, file = paste0("res/", res_reg_name))
}else{
res_reg <- readRDS(paste0("res/", res_reg_name))
}
file_found <- res_bayes_name %in% dir("res/")
nPar <- max(index_mat$full_rate_mat)
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
log_posterior
source("~/corhmm-dredge/code/utils.R")
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
debug(log_posterior)
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
lp_q
params
lp_like
lp_posterior
lp_posterior
params
params
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
ggplot(data = plot_data_long, aes(x = type, y = value)) +
geom_boxplot() +
facet_wrap(~trans)
res_bayes <- readRDS(paste0("res/", res_bayes_name))
res_bayes_name
############### Simulation scenario 1 ####################
# which simulation number
simulation <- "01"
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
res_reg_name <- paste0("res_reg-", simulation, ".RDS")
res_unreg_name <- paste0("res_unreg-", simulation, ".RDS")
res_bayes_name <- paste0("res_bayes-", simulation, ".RDS")
# load everything
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=1)
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
res_unreg <- readRDS(paste0("res/", res_unreg_name))
res_reg <- readRDS(paste0("res/", res_reg_name))
res_bayes <- readRDS(paste0("res/", res_bayes_name))
res_bayes
res_bayes
df_bayes <- do.call(rbind, lapply(res_bayes, function(x) summary(x)$quantiles[,3]))
df_bayes
summary(res_bayes)[[1]]
summary(res_bayes[[1]])
summary(res_bayes[[1]])$quantiles
summary(res_bayes[[1]])$quantiles[,3]
df_bayes <- do.call(rbind, lapply(res_bayes, function(x) summary(x)$quantiles[,3]))
colnames(plot_data) <- c("01_unreg", "10_unreg", "01_reg", "10_reg", "01_bayes", "10_bayes")
plot_data <- (cbind(df_unreg, df_reg, df_bayes))
colnames(plot_data) <- c("01_unreg", "10_unreg", "01_reg", "10_reg", "01_bayes", "10_bayes")
plot_data <- (cbind(df_unreg, df_reg, df_bayes))
colnames(plot_data) <- c("01_unreg", "10_unreg", "01_reg", "10_reg", "01_bayes", "10_bayes")
bias = colMeans(plot_data - cbind(par_table, par_table, par_table))
varr = apply(plot_data, 2, var)
mse = colMeans((plot_data - cbind(par_table, par_table, par_table))^2)
rmse = sqrt(colMeans((plot_data - cbind(par_table,par_table, par_table))^2))
print(t(data.frame(bias, varr, mse, rmse)))
plot_data_long <- pivot_longer(as.data.frame(plot_data), cols = everything())
plot_data_long <- data.frame(do.call(rbind, strsplit(plot_data_long$name, "_")), value = plot_data_long$value)
colnames(plot_data_long) <- c("trans", "type", "value")
ggplot(data = plot_data_long, aes(x = type, y = value)) +
geom_boxplot() +
facet_wrap(~trans)
value
ggplot(data = plot_data_long, aes(x = type, y = log(value))) +
geom_boxplot() +
facet_wrap(~trans)
############### Simulation scenario 2 ####################
# which simulation number
simulation <- "02"
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
res_reg_name <- paste0("res_reg-", simulation, ".RDS")
res_unreg_name <- paste0("res_unreg-", simulation, ".RDS")
res_bayes_name <- paste0("res_bayes-", simulation, ".RDS")
# load everything
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=1)
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
par_table
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
par_table
par_table_name
index_mat
# load everything
index_mat <- get_index_mat(nChar=2, nStates=2, nRateClass=1)
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
par_table
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
res_unreg <- readRDS(paste0("res/", res_unreg_name))
res_reg <- readRDS(paste0("res/", res_reg_name))
res_bayes <- readRDS(paste0("res/", res_bayes_name))
res_bayes
dexp(c(0.1, 0.0001), 1, log=TRUE)
dexp(c(0, 0.0001), 1, log=TRUE)
source("~/corhmm-dredge/code/utils.R")
MCMCmetrop1R
?MCMCmetrop1R
corHMM
# simple two character simulation
setwd("~/corhmm-dredge/")
library(corHMM)
library(parallel)
library(MASS)
library(MCMCpack)
source("code/utils.R")
nSim <- 100
mccores <- 100
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
phy <- trees[[1]]
# which simulation number
simulation <- "02"
overwrite <- FALSE
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
res_reg_name <- paste0("res_reg-", simulation, ".RDS")
res_unreg_name <- paste0("res_unreg-", simulation, ".RDS")
res_bayes_name <- paste0("res_bayes-", simulation, ".RDS")
# creates an index mat appropriate for nchar, nstates, and nhidden
index_mat <- get_index_mat(nChar=2, nStates=2, nRateClass=1)
###### ###### ###### ###### parameter table generation ###### ###### ###### ######
file_found <- par_table_name %in% dir("parameter_tables/")
if(!file_found | overwrite){
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
write.csv(par_table, file = paste0("parameter_tables/", par_table_name), row.names = FALSE)
}else{
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
}
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
###### ###### ###### ###### data simulation ###### ###### ###### ######
file_found <- full_dat_name %in% dir("data/")
if(!file_found | overwrite){
full_dat <- lapply(rate_mats, function(x) get_sim_data(phy, x, index_mat))
saveRDS(full_dat, file = paste0("data/", full_dat_name))
}else{
full_dat <- readRDS(paste0("data/", full_dat_name))
}
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
###### ###### ###### ###### model fitting ###### ###### ###### ######
file_found <- res_unreg_name %in% dir("res/")
if(!file_found | overwrite){
res_unreg <- mclapply(cor_dat, function(x)
corHMM(phy, x, 1),
mc.cores = mccores)
saveRDS(res_unreg, file = paste0("res/", res_unreg_name))
}else{
res_unreg <- readRDS(paste0("res/", res_unreg_name))
}
file_found <- res_reg_name %in% dir("res/")
if(!file_found | overwrite){
res_reg <- mclapply(cor_dat, function(x)
corHMM:::corHMMDredge(phy, x, 1, pen_type = "logl1"),
mc.cores = mccores)
saveRDS(res_reg, file = paste0("res/", res_reg_name))
}else{
res_reg <- readRDS(paste0("res/", res_reg_name))
}
file_found <- res_bayes_name %in% dir("res/")
mccores = 1
nPar <- max(index_mat$full_rate_mat)
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), optim.lower = 1e-8,
optim.upper = 1e2, optim.method = "Nelder-Mead",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar), optim.lower = 1e-8,
optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B", hessian=FALSE,
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B", hessian=FALSE,
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B", hessian=FALSE,
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
source("~/corhmm-dredge/code/utils.R")
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
source("~/corhmm-dredge/code/utils.R")
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
quiet <- function(fun) {
function(...) {
message_before <- getOption("show.error.messages")
on.exit(options(show.error.messages = message_before))
options(show.error.messages = FALSE)
result <- fun(...)
options(show.error.messages = message_before)
return(result)
}
}
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
source("~/corhmm-dredge/code/utils.R")
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
source("~/corhmm-dredge/code/utils.R")
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
debug(log_posterior)
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores, mc.silent = FALSE)
\
lp_like
lp_posterior
lp_posterior
print(lp_like)
source("~/corhmm-dredge/code/utils.R")
tmp
tmp
log_posterior()
log_posterior(
log_posterior
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
optim.lower = 1e-8, optim.upper = 1e2, optim.method = "L-BFGS-B",
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores, mc.silent = FALSE)
source("~/corhmm-dredge/code/utils.R")
source("~/corhmm-dredge/code/utils.R")
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
# simple binary simulation
setwd("~/corhmm-dredge/")
library(corHMM)
library(parallel)
library(MASS)
library(MCMCpack)
source("code/utils.R")
nSim <- 100
mccores <- 100
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
phy <- trees[[1]]
# which simulation number
simulation <- "01"
overwrite <- FALSE
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
res_reg_name <- paste0("res_reg-", simulation, ".RDS")
res_unreg_name <- paste0("res_unreg-", simulation, ".RDS")
res_bayes_name <- paste0("res_bayes-", simulation, ".RDS")
# creates an index mat appropriate for nchar, nstates, and nhidden
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=1)
###### ###### ###### ###### parameter table generation ###### ###### ###### ######
file_found <- par_table_name %in% dir("parameter_tables/")
if(!file_found | overwrite){
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
write.csv(par_table, file = paste0("parameter_tables/", par_table_name), row.names = FALSE)
}else{
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
}
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
###### ###### ###### ###### data simulation ###### ###### ###### ######
file_found <- full_dat_name %in% dir("data/")
if(!file_found | overwrite){
full_dat <- lapply(rate_mats, function(x) get_sim_data(phy, x, index_mat))
saveRDS(full_dat, file = paste0("data/", full_dat_name))
}else{
full_dat <- readRDS(paste0("data/", full_dat_name))
}
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
###### ###### ###### ###### model fitting ###### ###### ###### ######
file_found <- res_unreg_name %in% dir("res/")
if(!file_found | overwrite){
res_unreg <- mclapply(cor_dat, function(x)
corHMM(phy, x, 1),
mc.cores = mccores)
saveRDS(res_unreg, file = paste0("res/", res_unreg_name))
}else{
res_unreg <- readRDS(paste0("res/", res_unreg_name))
}
file_found <- res_reg_name %in% dir("res/")
if(!file_found | overwrite){
res_reg <- mclapply(cor_dat, function(x)
corHMM:::corHMMDredge(phy, x, 1, pen_type = "logl1"),
mc.cores = mccores)
saveRDS(res_reg, file = paste0("res/", res_reg_name))
}else{
res_reg <- readRDS(paste0("res/", res_reg_name))
}
mccores <- 1
nPar <- max(index_mat$full_rate_mat)
res_bayes <- mclapply(cor_dat, function(x)
MCMCmetrop1R(log_posterior, theta.init=rep(0.5, nPar),
mcmc=10000, burnin=1000, thin=10, verbose=TRUE,
tree=phy, data=x, rate.cat = 1, logfun=TRUE),
mc.cores = mccores)
