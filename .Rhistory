print(df_summary)
ggplot(df_all, aes(x = factor(type), y = diff, color = type)) +
geom_half_boxplot(center=TRUE, errorbar.draw=FALSE, width=0.75, nudge=n, outlier.colour = NA) +
geom_half_point(alpha = 0.25, position=position_dodge(width=0.75)) +
geom_half_violin(side="r", nudge=n, trim=FALSE, width=0.75, position=position_dodge(width=0.75)) +
coord_cartesian(ylim=c(-5,5)) +
facet_grid(par~ntips, labeller = labeller(
par = label_parsed,   # Use label_parsed for mathematical expressions
ntips = label_parsed  # Use label_parsed for mathematical expressions
)) +
theme_minimal() +
theme(legend.position="bottom",
axis.text.x = element_text(angle = 45, hjust = 1),
strip.background = element_blank(),
strip.text.x = element_text(face = "bold", size = 12),
strip.text.y = element_text(face = "bold", size = 12, angle = 0)
) +
labs(x = "Type", y = "Difference", color = "Type",
caption = "Source: Data Source Here") +
scale_color_brewer(palette = "Set1") # Use a color-blind friendly palette
ggplot(df_all, aes(x = factor(type), y = diff, color = type)) +
geom_half_boxplot(center=TRUE, errorbar.draw=FALSE, width=0.75, nudge=n, outlier.colour = NA) +
geom_half_point(alpha = 0.25, position=position_dodge(width=0.75)) +
coord_cartesian(ylim=c(-5,5)) +
facet_grid(par~ntips, labeller = labeller(
par = label_parsed,   # Use label_parsed for mathematical expressions
ntips = label_parsed  # Use label_parsed for mathematical expressions
)) +
theme_minimal() +
theme(legend.position="bottom",
axis.text.x = element_text(angle = 45, hjust = 1),
strip.background = element_blank(),
strip.text.x = element_text(face = "bold", size = 12),
strip.text.y = element_text(face = "bold", size = 12, angle = 0)
) +
labs(x = "Type", y = "Difference", color = "Type",
caption = "Source: Data Source Here") +
scale_color_brewer(palette = "Set1") # Use a color-blind friendly palette
ggplot(df_all, aes(x = factor(type), y = diff, color = type)) +
geom_half_boxplot(center=TRUE, errorbar.draw=FALSE, width=0.75, nudge=n, outlier.colour = NA) +
geom_half_point(alpha = 0.25, position=position_dodge(width=0.75)) +
geom_half_violin(side="r", nudge=n, trim=FALSE, width=0.75, position=position_dodge(width=0.75)) +
coord_cartesian(ylim=c(-5,5)) +
facet_grid(par~ntips, labeller = labeller(
par = label_parsed,   # Use label_parsed for mathematical expressions
ntips = label_parsed  # Use label_parsed for mathematical expressions
)) +
theme_minimal() +
theme(legend.position="bottom",
axis.text.x = element_text(angle = 45, hjust = 1),
strip.background = element_blank(),
strip.text.x = element_text(face = "bold", size = 12),
strip.text.y = element_text(face = "bold", size = 12, angle = 0)
) +
labs(x = "Type", y = "Difference", color = "Type",
caption = "Source: Data Source Here") +
scale_color_brewer(palette = "Set1") # Use a color-blind friendly palette
rlang::last_trace()
print(df_summary)
dev.off()
cor_dat
full_dat
rate_mats
tmp
par_table
par_table
res_list
# format data and compare results
df_list <- lapply(res_list, function(x) do.call(rbind, lapply(x, get_solution_from_res)))
df_true <- do.call(rbind, lapply(full_dat, function(x) get_par_from_rate_mat(x, index_mat)))
ntips <- do.call(rbind, lapply(full_dat, function(x) length(x$phy$tip.label)))
ntips
ntips
df_summary
ggplot(df_all, aes(x = factor(type), y = rmse, color = type)) +
geom_boxplot(center=TRUE, errorbar.draw=FALSE, width=0.75, nudge=n, outlier.colour = NA)
ggplot(df_summary, aes(x = factor(type), y = rmse, color = type)) +
geom_boxplot(center=TRUE, errorbar.draw=FALSE, width=0.75, nudge=n, outlier.colour = NA)
ggplot(df_summary, aes(x = factor(type), y = mse, color = type)) +
geom_boxplot(center=TRUE, errorbar.draw=FALSE, width=0.75, nudge=n, outlier.colour = NA)
ggplot(df_summary, aes(x = factor(type), y = bias, color = type)) +
geom_boxplot(center=TRUE, errorbar.draw=FALSE, width=0.75, nudge=n, outlier.colour = NA)
df_summary
ggplot(df_summary, aes(x = factor(type), y = bias, fill = type)) +
geom_boxplot(center=TRUE, errorbar.draw=FALSE, width=0.75, nudge=n, outlier.colour = NA)
ggplot(df_summary, aes(x = factor(type), y = bias, fill = type)) +
geom_boxplot(center=TRUE, errorbar.draw=FALSE, width=0.75, outlier.colour = NA)
ggplot(df_summary, aes(x = factor(type), y = bias, fill = type)) +
geom_boxplot(center=TRUE, width=0.75, outlier.colour = NA)
ggplot(df_summary, aes(x = factor(type), y = bias, fill = type)) +
geom_boxplot(width=0.75, outlier.colour = NA)
ggplot(df_summary, aes(x = factor(type), y = bias, fill = type)) +
geom_boxplot(width=0.75, outlier.colour = NA)
setwd("~/corhmm-dredge/")
source("code/utils.R")
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
setwd("~/corhmm-dredge/")
library(corHMM)
source("code/utils.R")
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
simulation <- "01"
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
sim_res_files <- dir("res/", full.names = TRUE)[grep(paste0("res", simulation, "_"), dir("res/"))]
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=1)
setwd("~/corhmm-dredge/")
library(corHMM)
source("code/utils.R")
# sim 1
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
simulation <- "01"
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
sim_res_files <- dir("res/", full.names = TRUE)[grep(paste0("res", simulation, "_"), dir("res/"))]
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=1)
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
setwd("~/corhmm-dredge/")
library(corHMM)
source("code/utils.R")
# sim 1
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
simulation <- "01"
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
sim_res_files <- dir("res/", full.names = TRUE)[grep(paste0("res", simulation, "_"), dir("res/"))]
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=1)
tmp <- get_par_table(index_mat, 100, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, "[[", "cor_dat")
res_list <- lapply(sim_res_files, readRDS)
names(res_list) <- gsub(".*_", "", sim_res_files) %>% gsub(".RDS", "", .)
df_long_list
res_list$`reg-l1`
res_list$`reg-l2`
res_list$`reg-l1`
# format data and compare results
df_list <- lapply(res_list, function(x) do.call(rbind, lapply(x, get_solution_from_res)))
df_true <- do.call(rbind, lapply(full_dat, function(x) get_par_from_rate_mat(x, index_mat)))
ntips <- do.call(rbind, lapply(full_dat, function(x) length(x$phy$tip.label)))
df_true_long <- get_better_df(df_true, colnames(tmp), "true", ntips)
i = 1
df_true_long
get_better_df(df_list[[i]], colnames(tmp), names(res_list)[i], ntips)
df_long_list
df_long_list <- list()
for(i in 1:length(df_list)){
df_long_list[[i]] <- get_better_df(df_list[[i]], colnames(tmp), names(res_list)[i], ntips)
df_long_list[[i]]$true <- df_true_long$value
df_long_list[[i]]$diff <- df_long_list[[i]]$value - df_true_long$value
}
df_all <- do.call(rbind, df_long_list)
convert_par_format <- function(par_value) {
gsub("\\((\\d)\\)_\\((\\d)\\)", "q[\\1][\\2]", par_value)
}
df_all$par <- sapply(df_all$par, convert_par_format)
df_all
cbind("sim-01", df_all)
cbind(sim = "sim-01", df_all)
df_all <- cbind(sim = "sim-01", df_all)
df_all
df_all_1 <- cbind(sim = "sim-01", df_all)
# sim 2
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
simulation <- "02"
index_mat <- get_index_mat(nChar=2, nStates=2, nRateClass=1)
# load
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
sim_res_files <- dir("res/", full.names = TRUE)[grep(paste0("res", simulation, "_"), dir("res/"))]
tmp <- get_par_table(index_mat, 100, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, "[[", "cor_dat")
res_list <- lapply(sim_res_files, readRDS)
# sim 2
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
simulation <- "02"
index_mat <- get_index_mat(nChar=2, nStates=2, nRateClass=1)
# load
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
sim_res_files <- dir("res/", full.names = TRUE)[grep(paste0("res", simulation, "_"), dir("res/"))]
tmp <- get_par_table(index_mat, 100, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, "[[", "cor_dat")
res_list <- lapply(sim_res_files, readRDS)
names(res_list) <- gsub(".*_", "", sim_res_files) %>% gsub(".RDS", "", .)
# format data and compare results
df_list <- lapply(res_list, function(x) do.call(rbind, lapply(x, get_solution_from_res)))
df_true <- do.call(rbind, lapply(full_dat, function(x) get_par_from_rate_mat(x, index_mat)))
ntips <- do.call(rbind, lapply(full_dat, function(x) length(x$phy$tip.label)))
df_true_long <- get_better_df(df_true, colnames(tmp), "true", ntips)
df_long_list <- list()
for(i in 1:length(df_list)){
df_long_list[[i]] <- get_better_df(df_list[[i]], colnames(tmp), names(res_list)[i], ntips)
df_long_list[[i]]$true <- df_true_long$value
df_long_list[[i]]$diff <- df_long_list[[i]]$value - df_true_long$value
}
df_all <- do.call(rbind, df_long_list)
convert_par_format <- function(par_value) {
gsub("\\((\\d)\\)_\\((\\d)\\)", "q[\\1][\\2]", par_value)
}
df_all$par <- sapply(df_all$par, convert_par_format)
df_all_2 <- cbind(sim = "sim-02", df_all)
# sim 3
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
simulation <- "03"
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=2)
# load
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
sim_res_files <- dir("res/", full.names = TRUE)[grep(paste0("res", simulation, "_"), dir("res/"))]
tmp <- get_par_table(index_mat, 100, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, "[[", "cor_dat")
res_list <- lapply(sim_res_files, readRDS)
names(res_list) <- gsub(".*_", "", sim_res_files) %>% gsub(".RDS", "", .)
# format data and compare results
df_list <- lapply(res_list, function(x) do.call(rbind, lapply(x, get_solution_from_res)))
df_true <- do.call(rbind, lapply(full_dat, function(x) get_par_from_rate_mat(x, index_mat)))
ntips <- do.call(rbind, lapply(full_dat, function(x) length(x$phy$tip.label)))
df_true_long <- get_better_df(df_true, colnames(tmp), "true", ntips)
# sim 3
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
simulation <- "03"
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=2)
# load
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
sim_res_files <- dir("res/", full.names = TRUE)[grep(paste0("res", simulation, "_"), dir("res/"))]
tmp <- get_par_table(index_mat, 100, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, "[[", "cor_dat")
res_list <- lapply(sim_res_files, readRDS)
names(res_list) <- gsub(".*_", "", sim_res_files) %>% gsub(".RDS", "", .)
# format data and compare results
df_list <- lapply(res_list, function(x) do.call(rbind, lapply(x, get_solution_from_res)))
df_true <- do.call(rbind, lapply(full_dat, function(x) get_par_from_rate_mat(x, index_mat)))
ntips <- do.call(rbind, lapply(full_dat, function(x) length(x$phy$tip.label)))
df_true_long <- get_better_df(df_true, colnames(tmp), "true", ntips)
ntips
df_true
df_all_2
df_all$par
# sim 1
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
simulation <- "01"
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=1)
# load
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
sim_res_files <- dir("res/", full.names = TRUE)[grep(paste0("res", simulation, "_"), dir("res/"))]
tmp <- get_par_table(index_mat, 100, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, "[[", "cor_dat")
res_list <- lapply(sim_res_files, readRDS)
names(res_list) <- gsub(".*_", "", sim_res_files) %>% gsub(".RDS", "", .)
# format data and compare results
df_list <- lapply(res_list, function(x) do.call(rbind, lapply(x, get_solution_from_res)))
df_true <- do.call(rbind, lapply(full_dat, function(x) get_par_from_rate_mat(x, index_mat)))
ntips <- do.call(rbind, lapply(full_dat, function(x) length(x$phy$tip.label)))
df_true_long <- get_better_df(df_true, colnames(tmp), "true", ntips)
df_long_list <- list()
for(i in 1:length(df_list)){
df_long_list[[i]] <- get_better_df(df_list[[i]], colnames(tmp), names(res_list)[i], ntips)
df_long_list[[i]]$true <- df_true_long$value
df_long_list[[i]]$diff <- df_long_list[[i]]$value - df_true_long$value
}
df_all <- do.call(rbind, df_long_list)
convert_par_format <- function(par_value) {
gsub("\\((\\d)\\)_\\((\\d)\\)", "q[\\1][\\2]", par_value)
}
df_all$par
sapply(df_all$par, convert_par_format)
df_all_1 <- cbind(sim = "sim-01", df_all)
# sim 2
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
simulation <- "02"
index_mat <- get_index_mat(nChar=2, nStates=2, nRateClass=1)
# load
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
sim_res_files <- dir("res/", full.names = TRUE)[grep(paste0("res", simulation, "_"), dir("res/"))]
tmp <- get_par_table(index_mat, 100, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, "[[", "cor_dat")
res_list <- lapply(sim_res_files, readRDS)
names(res_list) <- gsub(".*_", "", sim_res_files) %>% gsub(".RDS", "", .)
# format data and compare results
df_list <- lapply(res_list, function(x) do.call(rbind, lapply(x, get_solution_from_res)))
df_true <- do.call(rbind, lapply(full_dat, function(x) get_par_from_rate_mat(x, index_mat)))
ntips <- do.call(rbind, lapply(full_dat, function(x) length(x$phy$tip.label)))
df_true_long <- get_better_df(df_true, colnames(tmp), "true", ntips)
df_long_list <- list()
for(i in 1:length(df_list)){
df_long_list[[i]] <- get_better_df(df_list[[i]], colnames(tmp), names(res_list)[i], ntips)
df_long_list[[i]]$true <- df_true_long$value
df_long_list[[i]]$diff <- df_long_list[[i]]$value - df_true_long$value
}
df_all <- do.call(rbind, df_long_list)
convert_par_format <- function(par_value) {
gsub("\\((\\d)\\)_\\((\\d)\\)", "q[\\1][\\2]", par_value)
}
df_all$par
df_all$par <- sapply(df_all$par, convert_par_format)
for(i in 1:length(df_list)){
df_long_list[[i]] <- get_better_df(df_list[[i]], colnames(tmp), names(res_list)[i], ntips)
df_long_list[[i]]$true <- df_true_long$value
df_long_list[[i]]$diff <- df_long_list[[i]]$value - df_true_long$value
}
df_all <- do.call(rbind, df_long_list)
# convert_par_format <- function(par_value) {
#   gsub("\\((\\d)\\)_\\((\\d)\\)", "q[\\1][\\2]", par_value)
# }
# df_all$par <- sapply(df_all$par, convert_par_format)
df_all_2 <- cbind(sim = "sim-02", df_all)
df_all_2
# sim 3
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
simulation <- "03"
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=2)
# load
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
sim_res_files <- dir("res/", full.names = TRUE)[grep(paste0("res", simulation, "_"), dir("res/"))]
tmp <- get_par_table(index_mat, 100, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, "[[", "cor_dat")
res_list <- lapply(sim_res_files, readRDS)
names(res_list) <- gsub(".*_", "", sim_res_files) %>% gsub(".RDS", "", .)
# format data and compare results
df_list <- lapply(res_list, function(x) do.call(rbind, lapply(x, get_solution_from_res)))
df_true <- do.call(rbind, lapply(full_dat, function(x) get_par_from_rate_mat(x, index_mat)))
ntips <- do.call(rbind, lapply(full_dat, function(x) length(x$phy$tip.label)))
df_true_long <- get_better_df(df_true, colnames(tmp), "true", ntips)
# sim 3
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
simulation <- "03"
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=2)
# load
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
sim_res_files <- dir("res/", full.names = TRUE)[grep(paste0("res", simulation, "_"), dir("res/"))]
tmp <- get_par_table(index_mat, 100, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
rate_mats <- get_rate_mats(index_mat, par_table)
full_dat <- readRDS(paste0("data/", full_dat_name))
cor_dat <- lapply(full_dat, "[[", "cor_dat")
res_list <- lapply(sim_res_files, readRDS)
names(res_list) <- gsub(".*_", "", sim_res_files) %>% gsub(".RDS", "", .)
res_list
# simple two state simulation with hmms
setwd("~/corhmm-dredge/")
library(corHMM)
library(parallel)
library(MASS)
source("code/utils.R")
nSim <- 100
if (detectCores()>100){
mccores <- 100
}else{
mccores <- 4
}
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
phy <- trees[[1]]
# which simulation number
simulation <- "03"
overwrite <- FALSE
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
# creates an index mat appropriate for nchar, nstates, and nhidden
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=2)
###### ###### ###### ###### parameter table generation ###### ###### ###### ######
file_found <- par_table_name %in% dir("parameter_tables/")
if(!file_found | overwrite){
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
# modify for hidden states
par_table[,c(1,2)] <- par_table[,c(1,2)] * 5
par_table[,c(3,4)] <- par_table[,c(3,4)] / 5
par_table[,c(5,6)] <- par_table[,c(5,6)] * 2
write.csv(par_table, file = paste0("parameter_tables/", par_table_name), row.names = FALSE)
}else{
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
}
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
###### ###### ###### ###### data simulation ###### ###### ###### ######
file_found <- full_dat_name %in% dir("data/")
if(!file_found | overwrite){
full_dat <- lapply(rate_mats, function(x) get_sim_data(phy, x, index_mat))
saveRDS(full_dat, file = paste0("data/", full_dat_name))
}else{
full_dat <- readRDS(paste0("data/", full_dat_name))
}
# format data
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
mccores
corHMM(full_dat[[1]]$phy, full_dat[[1]]$cor_dat, 2, root.p = "maddfitz")
full_dat[[1]]$phy
full_dat
cor_dat <- lapply(full_dat, function(x) get_formatted_data(x, index_mat))
cor_dat
# simple two state simulation with hmms
setwd("~/corhmm-dredge/")
library(corHMM)
library(parallel)
library(MASS)
source("code/utils.R")
nSim <- 100
if (detectCores()>100){
mccores <- 100
}else{
mccores <- 4
}
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
phy <- trees[[1]]
# which simulation number
simulation <- "03"
overwrite <- TRUE
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
# creates an index mat appropriate for nchar, nstates, and nhidden
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=2)
###### ###### ###### ###### parameter table generation ###### ###### ###### ######
file_found <- par_table_name %in% dir("parameter_tables/")
if(!file_found | overwrite){
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
# modify for hidden states
par_table[,c(1,2)] <- par_table[,c(1,2)] * 5
par_table[,c(3,4)] <- par_table[,c(3,4)] / 5
par_table[,c(5,6)] <- par_table[,c(5,6)] * 2
write.csv(par_table, file = paste0("parameter_tables/", par_table_name), row.names = FALSE)
}else{
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
}
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
###### ###### ###### ###### data simulation ###### ###### ###### ######
file_found <- full_dat_name %in% dir("data/")
if(!file_found | overwrite){
for(i in 1:length(full_dat)){
cat("\r", i, "out of", length(full_dat), "...    ")
full_dat[[i]]$dat <- get_sim_data(full_dat[[i]]$phy, full_dat[[i]]$par, index_mat)
full_dat[[i]]$cor_dat <- get_formatted_data(full_dat[[i]]$dat, index_mat)
}
saveRDS(full_dat, file = paste0("data/", full_dat_name))
}else{
full_dat <- readRDS(paste0("data/", full_dat_name))
}
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
# let's create the full data strucutre now.
# a list with phy, sim pars, data
full_dat <- list()
count <- 1
for(i in trees){
for(j in i){
for(k in rate_mats){
tmp <- list(phy = j, par = k, dat = NULL)
full_dat[[count]] <- tmp
count <- count+1
}
}
}
for(i in 1:length(full_dat)){
cat("\r", i, "out of", length(full_dat), "...    ")
full_dat[[i]]$dat <- get_sim_data(full_dat[[i]]$phy, full_dat[[i]]$par, index_mat)
full_dat[[i]]$cor_dat <- get_formatted_data(full_dat[[i]]$dat, index_mat)
}
