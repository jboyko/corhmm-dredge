espn$Name[espn$Name == "DeMario Douglas"] <-
"Demario Douglas"
espn$Name[espn$Name == "Gabe Davis"] <-
"Gabriel Davis"
espn$Name[espn$Name == "DJ Chark"] <-
"D.J. Chark"
espn$Name[espn$Name == "Kenneth Walker"] <-
"Kenneth Walker III"
espn <- espn[espn$Name %in% my_projections$full_name,]
my_projections$espn_rank <- NA
my_projections[match(espn$Name, my_projections$full_name),
grep("espn", colnames(my_projections))] <- espn$ESPN
my_projections$espn_diff <- my_projections$rank - my_projections$espn_rank
return(my_projections)
}
my_projections <- add_boris(my_projections, boris)
my_projections <- add_espn(my_projections, espn)
my_projections$vor_per_game <- my_projections$points_vor/17
# my_projections <- my_projections[my_projections$avg_type == "weighted",]
my_projections <- cbind(
my_projections[, c("full_name", "team", "pos", "age", "exp")],
draft = "",
my_projections[, c("rank", "espn_rank", "espn_diff", "boris_rank", "boris_diff", "overall_ecr", "ecr_diff", "adp",  "adp_diff", "uncertainty", "boris_best", "vor_per_game", "points", "points_vor", "dropoff")],
my_projections)
# espn_projections <- cbind(
#   espn_projections[, c("last_name", "first_name", "team", "pos", "age", "exp")], draft = "",
#   espn_projections[, c("rank", "overall_ecr", "adp", "ecr_diff", "adp_diff", "points",  "points_vor", "dropoff", "uncertainty")],
#   espn_projections)
TE_to_target <- c("Dalton Kincaid", "Kyle Pitts", "David Njoku", "Jake Ferguson", "Mark Andrews", "Noah Fant", "Isaiah Likely")
WR_to_target <- c("Brian Thomas Jr.", "Curtis Samuel", "Jaxon Smith-Njigba", "Jaylen Waddle", "Diontae Johnson", "Marquise Brown", "Malik Nabers", "Xavier Worthy", "Josh Palmer", "Courtland Sutton")
RB_to_target <- c("Chase Brown", "Trey Benson", "Kendre Miller", "Chuba Hubbard", "Ty Chandler", "Bucky Irving", "Najee Harris", "Raheem Mostert", "Kenneth Walker III")
QB_to_target <- c("Jayden Daniels", "Trevor Lawrence", "Brock Purdy", "Jordan Love", "Bo Nix")
players_to_target <- c(QB_to_target, TE_to_target, WR_to_target, RB_to_target)
i=1
players_to_target
my_projections$full_name
gsub(players_to_target[i], "yye", my_projections$full_name)
gsub(players_to_target[i], "AAAAAAAAAAAAAAAAAAAAAAA", my_projections$full_name)
gsub(players_to_target[i], paste0(players_to_target[i], "*"), my_projections$full_name)
for(i in seq_along(players_to_target)){
my_projections$full_name <- gsub(players_to_target[i], paste0(players_to_target[i], "*"), my_projections$full_name)
}
write.csv(my_projections, "/home/jboyko/games/fantasy-football/2024/proj.csv", row.names = FALSE)
my_scrape <- scrape_data(src = c("CBS", "ESPN", "FantasyPros", "FantasySharks", "FFToday", "FleaFlicker", "NumberFire", "FantasyFootballNerd", "NFL", "RTSports", "Walterfootball"),
pos = c("QB", "RB", "WR", "TE"),
season = NULL, # NULL grabs the current season
week = NULL) # NULL grabs the current week
QB_to_target
saveRDS(my_scrape, file = "games/fantasy-football/2024/scrape.RDS")
my_scrape <- readRDS("games/fantasy-football/2024/scrape.RDS")
scoring_rules <- list(
pass = list(
pass_att = 0, pass_comp = 0, pass_inc = 0, pass_yds = 0.04, pass_tds = 6,
pass_int = -2, pass_40_yds = 0,  pass_300_yds = 0, pass_350_yds = 0,
pass_400_yds = 0
),
rush = list(
all_pos = TRUE,
rush_yds = 0.1,  rush_att = 0, rush_40_yds = 0, rush_tds = 6,
rush_100_yds = 0, rush_150_yds = 0, rush_200_yds = 0),
rec = list(
all_pos = FALSE,
"RB" = list(rec = 1, rec_yds = 0.1, rec_tds = 6, rec_40_yds = 0, rec_100_yds = 0, rec_150_yds = 0, rec_200_yds = 0),
"WR" = list(rec = 1, rec_yds = 0.1, rec_tds = 6, rec_40_yds = 0, rec_100_yds = 0, rec_150_yds = 0, rec_200_yds = 0),
"TE" = list(rec = 1, rec_yds = 0.1, rec_tds = 6, rec_40_yds = 0, rec_100_yds = 0, rec_150_yds = 0, rec_200_yds = 0)
),
misc = list(
all_pos = TRUE,
fumbles_lost = -2, fumbles_total = 0,
sacks = 0, two_pts = 2
),
kick = list(
xp = 1.0, fg_0019 = 3.0,  fg_2029 = 3.0, fg_3039 = 3.0, fg_4049 = 4.0,
fg_50 = 5.0,  fg_miss = -1
),
ret = list(
all_pos = TRUE,
return_tds = 6, return_yds = 0
),
idp = list(
all_pos = TRUE,
idp_solo = 1, idp_asst = 0.5, idp_sack = 2, idp_int = 3,  idp_fum_force = 3,
idp_fum_rec = 2,  idp_pd = 1, idp_td = 6,  idp_safety = 2
),
dst = list(
dst_fum_rec = 2,  dst_int = 2, dst_safety = 2, dst_sacks = 1, dst_td = 6,
dst_blk = 1.5, dst_ret_yds = 0, dst_pts_allowed = 0
),
pts_bracket = list(
list(threshold = 0, points = 10),
list(threshold = 6, points = 7),
list(threshold = 20, points = 4),
list(threshold = 34, points = 0),
list(threshold = 99, points = -4)
)
)
df <- data.frame(
WR = c(5, 9, 15, 21, 25, 28, 33, 40, 47, 52),
RB = c(5, 11, 15, 19, 22, 27, 31, 34, 39, 42),
QB = c(1, 3, 5, 6, 8, 8, 9, 11, 11, 14),
TE = c(1, 1, 1, 2, 5, 9, 11, 11, 11, 12),
row.names = paste("Round", 1:10)
)
rowSums(df)
colnames(df) <- c("WR", "RB", "QB", "TE")
# ecr diff
vor_base <- c(
QB = 11,
RB = 29,
WR = 37,
TE = 8,
K = 8, DST = 3, DL = 10, LB = 10, DB = 10)
my_stats <-  projections_table(my_scrape,
scoring_rules=scoring_rules,
vor_baseline=vor_base,
avg_type='average',
return_raw_stats = TRUE)
my_stats <- my_stats %>%
add_player_info()
write.csv(my_stats, "games/fantasy-football/2024/stats.csv")
my_projections <-  projections_table(my_scrape,
scoring_rules=scoring_rules,
vor_baseline=vor_base,
avg_type='average',
return_raw_stats = FALSE)
my_projections <- my_projections %>%
add_player_info() %>%
add_ecr() %>%
add_adp() %>%
add_uncertainty()
my_projections$ecr_diff <- my_projections$rank - my_projections$overall_ecr
my_projections$full_name <- paste0(my_projections$first_name, " " , my_projections$last_name)
boris <- read.csv("games/fantasy-football/2024/boris.csv")
add_boris <- function(my_projections, boris){
boris$Player.Name <- sapply(boris$Player.Name,
function(x) gsub(" Jr.", "", x))
boris$Player.Name <- sapply(boris$Player.Name,
function(x) gsub("s II", "s", x))
boris$Player.Name[boris$Player.Name == "Marvin Harrison"] <-
"Marvin Harrison Jr."
boris$Player.Name[boris$Player.Name == "DJ Moore"] <-
"D.J. Moore"
boris$Player.Name[boris$Player.Name == "Deebo Samuel Sr."] <-
"Deebo Samuel"
boris$Player.Name[boris$Player.Name == "Hollywood Brown"] <-
"Marquise Brown"
boris$Player.Name[boris$Player.Name == "Brian Thomas"] <-
"Brian Thomas Jr."
boris$Player.Name[boris$Player.Name == "Joshua Palmer"] <-
"Josh Palmer"
boris$Player.Name[boris$Player.Name == "DeMario Douglas"] <-
"Demario Douglas"
boris$Player.Name[boris$Player.Name == "Gabe Davis"] <-
"Gabriel Davis"
boris <- boris[boris$Player.Name %in% my_projections$full_name,]
my_projections$boris_tier <- NA
my_projections$boris_rank <- NA
my_projections$boris_sd <- NA
my_projections$boris_best <- NA
my_projections$boris_worst <- NA
my_projections[match(boris$Player.Name, my_projections$full_name),
grep("boris", colnames(my_projections))] <- boris[,c(3,1,8,5,6)]
my_projections$boris_diff <- my_projections$rank - my_projections$boris_rank
return(my_projections)
}
espn <- read.csv("games/fantasy-football/2024/espn.csv")
add_espn <- function(my_projections, espn){
espn$Name[espn$Name == "Marvin Harrison"] <-
"Marvin Harrison Jr."
espn$Name[espn$Name == "DJ Moore"] <-
"D.J. Moore"
espn$Name[espn$Name == "Hollywood Brown"] <-
"Marquise Brown"
espn$Name[espn$Name == "Brian Thomas"] <-
"Brian Thomas Jr."
espn$Name[espn$Name == "Joshua Palmer"] <-
"Josh Palmer"
espn$Name[espn$Name == "DeMario Douglas"] <-
"Demario Douglas"
espn$Name[espn$Name == "Gabe Davis"] <-
"Gabriel Davis"
espn$Name[espn$Name == "DJ Chark"] <-
"D.J. Chark"
espn$Name[espn$Name == "Kenneth Walker"] <-
"Kenneth Walker III"
espn <- espn[espn$Name %in% my_projections$full_name,]
my_projections$espn_rank <- NA
my_projections[match(espn$Name, my_projections$full_name),
grep("espn", colnames(my_projections))] <- espn$ESPN
my_projections$espn_diff <- my_projections$rank - my_projections$espn_rank
return(my_projections)
}
my_projections <- add_boris(my_projections, boris)
my_projections <- add_espn(my_projections, espn)
my_projections$vor_per_game <- my_projections$points_vor/17
# my_projections <- my_projections[my_projections$avg_type == "weighted",]
my_projections <- cbind(
my_projections[, c("full_name", "team", "pos", "age", "exp")],
draft = "",
my_projections[, c("rank", "espn_rank", "espn_diff", "boris_rank", "boris_diff", "overall_ecr", "ecr_diff", "adp",  "adp_diff", "uncertainty", "boris_best", "vor_per_game", "points", "points_vor", "dropoff")],
my_projections)
TE_to_target <- c("Dalton Kincaid", "Kyle Pitts", "David Njoku", "Jake Ferguson", "Mark Andrews", "Noah Fant", "Isaiah Likely")
WR_to_target <- c("Brian Thomas Jr.", "Curtis Samuel", "Jaxon Smith-Njigba", "Jaylen Waddle", "Diontae Johnson", "Marquise Brown", "Malik Nabers", "Xavier Worthy", "Josh Palmer", "Courtland Sutton")
RB_to_target <- c("Chase Brown", "Trey Benson", "Kendre Miller", "Chuba Hubbard", "Ty Chandler", "Bucky Irving", "Najee Harris", "Raheem Mostert", "Kenneth Walker III")
QB_to_target <- c("Jayden Daniels", "Trevor Lawrence", "Brock Purdy", "Jordan Love", "Bo Nix", "Geno Smith", "Tua Tagovailoa", "Matthew Stafford")
players_to_target <- c(QB_to_target, TE_to_target, WR_to_target, RB_to_target)
for(i in seq_along(players_to_target)){
my_projections$full_name <- gsub(players_to_target[i], paste0(players_to_target[i], "*"), my_projections$full_name)
}
write.csv(my_projections, "/home/jboyko/games/fantasy-football/2024/proj.csv", row.names = FALSE)
par <- c(9, 23, 33, 11)
getSumDiff <- function(par){
par <- round(exp(par))
vor_base <- c(
QB = par[1],
RB = par[2],
WR = par[3],
TE = par[4],
K = 8, DST = 3, DL = 10, LB = 10, DB = 10)
my_projections <-  projections_table(my_scrape,
scoring_rules=scoring_rules,
vor_baseline=vor_base,
avg_type='average')
my_projections <- my_projections %>%
add_player_info() %>%
add_ecr() %>%
add_adp() %>%
add_uncertainty()
my_projections$full_name <- paste0(my_projections$first_name, " " , my_projections$last_name)
my_projections <- add_boris(my_projections, boris)
top_200_df <- my_projections[order(my_projections$points_vor, decreasing = TRUE)[1:200],]
top_200_df$boris_diff <- top_200_df$rank - top_200_df$boris_rank
avg_table <- aggregate(top_200_df$boris_diff, by = list(top_200_df$pos), function(x) mean(x, na.rm=TRUE))
sd_table <- aggregate(top_200_df$boris_diff, by = list(top_200_df$pos), function(x) sd(x, na.rm=TRUE))
# avg_table <- aggregate(top_200_df$adp_diff, by = list(top_200_df$pos), function(x) mean(x, na.rm=TRUE))
print(par)
print(avg_table)
return(mean(abs(avg_table$x)) + sd(abs(avg_table$x)))
}
par <- log(c(9, 32, 44, 8))
getSumDiff(par)
res <- optim(par, getSumDiff)
top_200_df$boris_diff
top_200_df <- my_projections[order(my_projections$points_vor, decreasing = TRUE)[1:200],]
top_200_df$boris_diff <- top_200_df$rank - top_200_df$boris_rank
top_200_df$boris_diff
avg_table <- aggregate(top_200_df$boris_diff, by = list(top_200_df$pos), function(x) mean(x, na.rm=TRUE))
sd_table <- aggregate(top_200_df$boris_diff, by = list(top_200_df$pos), function(x) sd(x, na.rm=TRUE))
avg_table
sd_table
avg_table
avg_table <- aggregate(top_200_df$boris_diff, by = list(top_200_df$pos),
function(x) mean(abs(x), na.rm=TRUE))
sd_table <- aggregate(top_200_df$boris_diff, by = list(top_200_df$pos),
function(x) sd(x, na.rm=TRUE))
avg_table
sd_table
getSumDiff <- function(par){
par <- round(exp(par))
vor_base <- c(
QB = par[1],
RB = par[2],
WR = par[3],
TE = par[4],
K = 8, DST = 3, DL = 10, LB = 10, DB = 10)
my_projections <-  projections_table(my_scrape,
scoring_rules=scoring_rules,
vor_baseline=vor_base,
avg_type='average')
my_projections <- my_projections %>%
add_player_info() %>%
add_ecr() %>%
add_adp() %>%
add_uncertainty()
my_projections$full_name <- paste0(my_projections$first_name, " " , my_projections$last_name)
my_projections <- add_boris(my_projections, boris)
top_200_df <- my_projections[order(my_projections$points_vor, decreasing = TRUE)[1:200],]
top_200_df$boris_diff <- top_200_df$rank - top_200_df$boris_rank
avg_table <- aggregate(top_200_df$boris_diff, by = list(top_200_df$pos),
function(x) mean(abs(x), na.rm=TRUE))
sd_table <- aggregate(top_200_df$boris_diff, by = list(top_200_df$pos),
function(x) sd(x, na.rm=TRUE))
# avg_table <- aggregate(top_200_df$adp_diff, by = list(top_200_df$pos), function(x) mean(x, na.rm=TRUE))
print(par)
print(avg_table)
return(mean(abs(avg_table$x)) + sd(abs(avg_table$x)))
}
par <- log(c(9, 32, 44, 8))
getSumDiff(par)
res <- optim(par, getSumDiff)
# ecr diff
vor_base <- c(
QB = 22,
RB = 29,
WR = 37,
TE = 8,
K = 8, DST = 3, DL = 10, LB = 10, DB = 10)
my_stats <-  projections_table(my_scrape,
scoring_rules=scoring_rules,
vor_baseline=vor_base,
avg_type='average',
return_raw_stats = TRUE)
my_stats <- my_stats %>%
add_player_info()
write.csv(my_stats, "games/fantasy-football/2024/stats.csv")
my_projections <-  projections_table(my_scrape,
scoring_rules=scoring_rules,
vor_baseline=vor_base,
avg_type='average',
return_raw_stats = FALSE)
my_projections <- my_projections %>%
add_player_info() %>%
add_ecr() %>%
add_adp() %>%
add_uncertainty()
my_projections$ecr_diff <- my_projections$rank - my_projections$overall_ecr
my_projections$full_name <- paste0(my_projections$first_name, " " , my_projections$last_name)
boris <- read.csv("games/fantasy-football/2024/boris.csv")
add_boris <- function(my_projections, boris){
boris$Player.Name <- sapply(boris$Player.Name,
function(x) gsub(" Jr.", "", x))
boris$Player.Name <- sapply(boris$Player.Name,
function(x) gsub("s II", "s", x))
boris$Player.Name[boris$Player.Name == "Marvin Harrison"] <-
"Marvin Harrison Jr."
boris$Player.Name[boris$Player.Name == "DJ Moore"] <-
"D.J. Moore"
boris$Player.Name[boris$Player.Name == "Deebo Samuel Sr."] <-
"Deebo Samuel"
boris$Player.Name[boris$Player.Name == "Hollywood Brown"] <-
"Marquise Brown"
boris$Player.Name[boris$Player.Name == "Brian Thomas"] <-
"Brian Thomas Jr."
boris$Player.Name[boris$Player.Name == "Joshua Palmer"] <-
"Josh Palmer"
boris$Player.Name[boris$Player.Name == "DeMario Douglas"] <-
"Demario Douglas"
boris$Player.Name[boris$Player.Name == "Gabe Davis"] <-
"Gabriel Davis"
boris <- boris[boris$Player.Name %in% my_projections$full_name,]
my_projections$boris_tier <- NA
my_projections$boris_rank <- NA
my_projections$boris_sd <- NA
my_projections$boris_best <- NA
my_projections$boris_worst <- NA
my_projections[match(boris$Player.Name, my_projections$full_name),
grep("boris", colnames(my_projections))] <- boris[,c(3,1,8,5,6)]
my_projections$boris_diff <- my_projections$rank - my_projections$boris_rank
return(my_projections)
}
espn <- read.csv("games/fantasy-football/2024/espn.csv")
add_espn <- function(my_projections, espn){
espn$Name[espn$Name == "Marvin Harrison"] <-
"Marvin Harrison Jr."
espn$Name[espn$Name == "DJ Moore"] <-
"D.J. Moore"
espn$Name[espn$Name == "Hollywood Brown"] <-
"Marquise Brown"
espn$Name[espn$Name == "Brian Thomas"] <-
"Brian Thomas Jr."
espn$Name[espn$Name == "Joshua Palmer"] <-
"Josh Palmer"
espn$Name[espn$Name == "DeMario Douglas"] <-
"Demario Douglas"
espn$Name[espn$Name == "Gabe Davis"] <-
"Gabriel Davis"
espn$Name[espn$Name == "DJ Chark"] <-
"D.J. Chark"
espn$Name[espn$Name == "Kenneth Walker"] <-
"Kenneth Walker III"
espn <- espn[espn$Name %in% my_projections$full_name,]
my_projections$espn_rank <- NA
my_projections[match(espn$Name, my_projections$full_name),
grep("espn", colnames(my_projections))] <- espn$ESPN
my_projections$espn_diff <- my_projections$rank - my_projections$espn_rank
return(my_projections)
}
my_projections <- add_boris(my_projections, boris)
my_projections <- add_espn(my_projections, espn)
my_projections$vor_per_game <- my_projections$points_vor/17
# my_projections <- my_projections[my_projections$avg_type == "weighted",]
my_projections <- cbind(
my_projections[, c("full_name", "team", "pos", "age", "exp")],
draft = "",
my_projections[, c("rank", "espn_rank", "espn_diff", "boris_rank", "boris_diff", "overall_ecr", "ecr_diff", "adp",  "adp_diff", "uncertainty", "boris_best", "vor_per_game", "points", "points_vor", "dropoff")],
my_projections)
TE_to_target <- c("Dalton Kincaid", "Kyle Pitts", "David Njoku", "Jake Ferguson", "Mark Andrews", "Noah Fant", "Isaiah Likely", "Pat Freiermuth")
WR_to_target <- c("Brian Thomas Jr.", "Curtis Samuel", "Jaxon Smith-Njigba", "Jaylen Waddle", "Diontae Johnson", "Marquise Brown", "Malik Nabers", "Xavier Worthy", "Josh Palmer", "Courtland Sutton", "Ja'Lynn Polk", "Michael Wilson")
RB_to_target <- c("Chase Brown", "Trey Benson", "Kendre Miller", "Chuba Hubbard", "Ty Chandler", "Bucky Irving", "Najee Harris", "Raheem Mostert", "Kenneth Walker III")
QB_to_target <- c("Jayden Daniels", "Trevor Lawrence", "Brock Purdy", "Jordan Love", "Bo Nix", "Geno Smith", "Tua Tagovailoa", "Matthew Stafford")
players_to_target <- c(QB_to_target, TE_to_target, WR_to_target, RB_to_target)
for(i in seq_along(players_to_target)){
my_projections$full_name <- gsub(players_to_target[i], paste0(players_to_target[i], "*"), my_projections$full_name)
}
write.csv(my_projections, "/home/jboyko/games/fantasy-football/2024/proj.csv", row.names = FALSE)
# simple binary simulation
setwd("~/corhmm-dredge/")
library(corHMM)
library(parallel)
library(MASS)
source("code/utils.R")
nSim <- 100
if (detectCores()>100){
mccores <- 100
}else{
mccores <- 4
}
trees <- lapply(dir("trees/", full.names = TRUE), read.tree)
# which simulation number
simulation <- "01"
overwrite <- TRUE
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
# creates an index mat appropriate for nchar, nstates, and nhidden
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=1)
###### ###### ###### ###### parameter table generation ###### ###### ###### ######
file_found <- par_table_name %in% dir("parameter_tables/")
if(!file_found | overwrite){
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
write.csv(par_table, file = paste0("parameter_tables/", par_table_name), row.names = FALSE)
}else{
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
}
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
# let's create the full data strucutre now.
# a list with phy, sim pars, data
full_dat <- list()
count <- 1
overwrite <- FALSE
# the various file names
par_table_name <- paste0("par_table-", simulation, ".csv")
full_dat_name <- paste0("full_data-", simulation, ".RDS")
cor_dat_name <- paste0("cor_data-", simulation, ".RDS")
# creates an index mat appropriate for nchar, nstates, and nhidden
index_mat <- get_index_mat(nChar=1, nStates=2, nRateClass=1)
###### ###### ###### ###### parameter table generation ###### ###### ###### ######
file_found <- par_table_name %in% dir("parameter_tables/")
if(!file_found | overwrite){
par_table <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
write.csv(par_table, file = paste0("parameter_tables/", par_table_name), row.names = FALSE)
}else{
tmp <- get_par_table(index_mat, nSim, mean = 0, sd = 0.25)
par_table <- read.csv(paste0("parameter_tables/", par_table_name))
colnames(par_table) <- colnames(tmp)
}
# creates a list of rate matrices for simulation
rate_mats <- get_rate_mats(index_mat, par_table)
# let's create the full data strucutre now.
# a list with phy, sim pars, data
full_dat <- list()
count <- 1
for(i in trees){
for(j in i){
for(k in rate_mats){
tmp <- list(phy = j, par = k, dat = NULL)
full_dat[[count]] <- tmp
count <- count+1
}
}
}
###### ###### ###### ###### data simulation ###### ###### ###### ######
file_found <- full_dat_name %in% dir("data/")
if(!file_found | overwrite){
for(i in 1:length(full_dat)){
cat("\r", i, "out of", length(full_dat), "...    ")
full_dat[[i]]$dat <- get_sim_data(full_dat[[i]]$phy, full_dat[[i]]$par, index_mat)
full_dat[[i]]$cor_dat <- get_formatted_data(full_dat[[i]]$dat, index_mat)
}
saveRDS(full_dat, file = paste0("data/", full_dat_name))
}else{
full_dat <- readRDS(paste0("data/", full_dat_name))
}
results_dir <- "res/"
fit_models(full_dat, "l1", 0, TRUE, paste0(results_dir, "res01_l0.RDS"), overwrite, mccores)
fit_models(full_dat, "l1", 1, TRUE, paste0(results_dir, "res01_l1.RDS"), overwrite, mccores)
file_exists <- function(file_path) {
file_path %in% dir(dirname(file_path))
}
mccores
fit_models(full_dat, "l1", 0, TRUE, paste0(results_dir, "res01_l0.RDS"), overwrite, mccores)
fit_models
overwrite
getwd()
results_dir
dir("structure_results/", full.names = TRUE)
file.path("param_results/")
get_full_path("param_results/")
get_full_path <- function(folder_name) {
return(normalizePath(file.path(getwd(), folder_name), winslash = "/", mustWork = FALSE))
}
results_dir <- get_full_path("param_results/")
results_dir
debug(fit_models)
overwrite
overwrite = FALSE
fit_models(full_dat, "l1", 0, TRUE, paste0(results_dir, "/res01_l0.RDS"), overwrite, mccores)
lambda
pen_type
x
x = data_list[[1]]
corHMMDredgeBase(x$phy, x$cor_dat, 1, pen.type = pen_type,
lambda = lambda, root.p = "maddfitz", grad = grad)
corHMM:::corHMMDredgeBase(x$phy, x$cor_dat, 1, pen.type = pen_type,
lambda = lambda, root.p = "maddfitz", grad = grad)
corHMM:::corHMMDredgeBase(x$phy, x$cor_dat, 1, pen.type = pen_type,
lambda = lambda, root.p = "maddfitz", grad = grad)
corHMM:::corHMMDredgeBase
